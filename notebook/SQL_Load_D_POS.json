{
	"name": "SQL_Load_D_POS",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e45e8a1d-1ed2-4248-a6a3-c9fabe392226"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "sql"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"set path_bronze_pos = 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/inventory_pos_history_details';"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"source": [
					"set path_silver_f_pos_data = 'abfss://silver@bigpharma.dfs.core.windows.net/f_pos_data';"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"source": [
					"-- ============================================\n",
					"-- 1. Rejestracja danych z Bronze jako widok tymczasowy\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW bronze_pos\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path '${path_bronze_pos}'\n",
					");"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"source": [
					"-- ============================================\n",
					"-- 2. Przygotowanie danych – najnowsze update + agregacja miesięczna\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_pos AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    country_id,\n",
					"    TRUNC(transaction_date, \"MM\") AS transaction_date,\n",
					"    SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"    SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"    SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price), 2) AS pos_sell_out_amount,\n",
					"    ROUND(SUM(pos_open_quantity * unit_price), 2) AS pos_open_amount,\n",
					"    ROUND(SUM(pos_end_quantity * unit_price), 2) AS pos_end_amount,\n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price) / NULLIF(SUM(pos_sell_out_quantity), 0), 2) AS unit_price\n",
					"FROM (\n",
					"    SELECT *, \n",
					"           ROW_NUMBER() OVER (\n",
					"             PARTITION BY product_id, country_id, update_date \n",
					"             ORDER BY update_date DESC\n",
					"           ) AS rn\n",
					"    FROM bronze_pos\n",
					") AS filtered\n",
					"WHERE rn = 1\n",
					"GROUP BY product_id, country_id, TRUNC(transaction_date, \"MM\");\n",
					""
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"-- ============================================\n",
					"-- 3. Stworzenie tabeli docelowej (Silver) jeśli nie istnieje\n",
					"-- ============================================\n",
					"CREATE TABLE IF NOT EXISTS f_pos_data\n",
					"USING delta\n",
					"LOCATION '${path_silver_f_pos_data}'\n",
					"AS\n",
					"SELECT * FROM aggregated_bronze_pos\n",
					"WHERE 1 = 0;\n",
					""
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"source": [
					"-- ============================================\n",
					"-- 4. MERGE INTO (UPSERT) danych do tabeli Delta\n",
					"-- ============================================\n",
					"MERGE INTO f_pos_data AS target\n",
					"USING aggregated_bronze_pos AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.transaction_date = source.transaction_date\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.pos_sell_out_quantity = source.pos_sell_out_quantity,\n",
					"    target.pos_open_quantity = source.pos_open_quantity,\n",
					"    target.pos_end_quantity = source.pos_end_quantity,\n",
					"    target.pos_sell_out_amount = source.pos_sell_out_amount,\n",
					"    target.pos_open_amount = source.pos_open_amount,\n",
					"    target.pos_end_amount = source.pos_end_amount,\n",
					"    target.unit_price = source.unit_price\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id,\n",
					"    country_id,\n",
					"    transaction_date,\n",
					"    pos_sell_out_quantity,\n",
					"    pos_open_quantity,\n",
					"    pos_end_quantity,\n",
					"    pos_sell_out_amount,\n",
					"    pos_open_amount,\n",
					"    pos_end_amount,\n",
					"    unit_price\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id,\n",
					"    source.country_id,\n",
					"    source.transaction_date,\n",
					"    source.pos_sell_out_quantity,\n",
					"    source.pos_open_quantity,\n",
					"    source.pos_end_quantity,\n",
					"    source.pos_sell_out_amount,\n",
					"    source.pos_open_amount,\n",
					"    source.pos_end_amount,\n",
					"    source.unit_price\n",
					"  );\n",
					""
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}