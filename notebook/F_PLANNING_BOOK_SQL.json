{
	"name": "F_PLANNING_BOOK_SQL",
	"properties": {
		"folder": {
			"name": "Load Gold"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4ca16e2e-db7d-42f5-986a-2bef5cd060a1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "sql"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"-- Tworzenie sesji Spark i załadowanie danych z Parquet\n",
					"CREATE OR REPLACE TEMP VIEW f_sales AS \n",
					"SELECT * FROM parquet.`abfss://silver@bigpharma.dfs.core.windows.net/f_sales`;\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW f_forecast AS \n",
					"SELECT * FROM parquet.`abfss://silver@bigpharma.dfs.core.windows.net/f_forecast`;\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW f_pos_data AS \n",
					"SELECT * FROM parquet.`abfss://silver@bigpharma.dfs.core.windows.net/f_pos_data`;\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW f_wh_data AS \n",
					"SELECT * FROM parquet.`abfss://silver@bigpharma.dfs.core.windows.net/f_wh_data`;\n",
					"\n",
					"-- Pobranie maksymalnej wartości forecast_snapshot\n",
					"WITH forecast_snapshots AS (\n",
					"  SELECT MAX(forecast_snapshot) AS current_month_snapshot\n",
					"  FROM f_forecast\n",
					"),\n",
					"last_month_snapshot AS (\n",
					"  SELECT ADD_MONTHS(current_month_snapshot, -1) AS last_month_snapshot\n",
					"  FROM forecast_snapshots\n",
					")\n",
					"\n",
					"-- Filtrowanie dla obecnego i poprzedniego miesiąca\n",
					"CREATE OR REPLACE TEMP VIEW f_forecast_filtered AS\n",
					"SELECT *\n",
					"FROM f_forecast\n",
					"WHERE forecast_snapshot IN (SELECT current_month_snapshot FROM forecast_snapshots UNION SELECT last_month_snapshot FROM last_month_snapshot);\n",
					"\n",
					"-- Normalizacja f_forecast dla bieżącego i poprzedniego miesiąca\n",
					"CREATE OR REPLACE TEMP VIEW f_forecast_max_norm AS \n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  forecast_date AS financial_date,\n",
					"  forecast_snapshot,\n",
					"  quantity,\n",
					"  amount,\n",
					"  unit_price,\n",
					"  0.0 AS discount,\n",
					"  whrs_sell_in_quantity,\n",
					"  whrs_open_quantity,\n",
					"  whrs_end_quantity,\n",
					"  whrs_sell_in_amount,\n",
					"  whrs_open_amount,\n",
					"  whrs_end_amount,\n",
					"  pos_sell_out_quantity,\n",
					"  pos_open_quantity,\n",
					"  pos_end_quantity,\n",
					"  pos_sell_out_amount,\n",
					"  pos_open_amount,\n",
					"  pos_end_amount\n",
					"FROM f_forecast_filtered\n",
					"WHERE forecast_snapshot = (SELECT current_month_snapshot FROM forecast_snapshots);\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW f_forecast_last_norm AS \n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  forecast_date AS financial_date,\n",
					"  forecast_snapshot,\n",
					"  quantity,\n",
					"  amount,\n",
					"  unit_price,\n",
					"  0.0 AS discount,\n",
					"  whrs_sell_in_quantity,\n",
					"  whrs_open_quantity,\n",
					"  whrs_end_quantity,\n",
					"  whrs_sell_in_amount,\n",
					"  whrs_open_amount,\n",
					"  whrs_end_amount,\n",
					"  pos_sell_out_quantity,\n",
					"  pos_open_quantity,\n",
					"  pos_end_quantity,\n",
					"  pos_sell_out_amount,\n",
					"  pos_open_amount,\n",
					"  pos_end_amount\n",
					"FROM f_forecast_filtered\n",
					"WHERE forecast_snapshot = (SELECT last_month_snapshot FROM last_month_snapshot);\n",
					"\n",
					"-- Normalizacja f_sales, f_pos_data, f_wh_data (analogiczne operacje)\n",
					"-- Filtrowanie i tworzenie normowanych widoków dla innych tabel (f_sales, f_pos_data, f_wh_data)...\n",
					"\n",
					"-- Przykład dla f_sales_max_norm\n",
					"CREATE OR REPLACE TEMP VIEW f_sales_max_norm AS\n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  shipped_date AS financial_date,\n",
					"  forecast_snapshot,\n",
					"  quantity,\n",
					"  amount,\n",
					"  unit_price,\n",
					"  0 AS whrs_sell_in_quantity,\n",
					"  0 AS whrs_open_quantity,\n",
					"  0 AS whrs_end_quantity,\n",
					"  0 AS whrs_sell_in_amount,\n",
					"  0 AS whrs_open_amount,\n",
					"  0 AS whrs_end_amount,\n",
					"  0 AS pos_sell_out_quantity,\n",
					"  0 AS pos_open_quantity,\n",
					"  0 AS pos_end_quantity,\n",
					"  0 AS pos_sell_out_amount,\n",
					"  0 AS pos_open_amount,\n",
					"  0 AS pos_end_amount,\n",
					"  discount\n",
					"FROM f_sales\n",
					"WHERE shipped_date < (SELECT current_month_snapshot FROM forecast_snapshots);\n",
					"\n",
					"-- Dla f_pos_data_max_norm i f_wh_data_max_norm również tworzysz widoki normalizujące\n",
					"-- Przykład dla f_pos_data_max_norm\n",
					"CREATE OR REPLACE TEMP VIEW f_pos_data_max_norm AS\n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  transaction_date AS financial_date,\n",
					"  forecast_snapshot,\n",
					"  0 AS quantity,\n",
					"  0 AS amount,\n",
					"  unit_price,\n",
					"  0 AS whrs_sell_in_quantity,\n",
					"  0 AS whrs_open_quantity,\n",
					"  0 AS whrs_end_quantity,\n",
					"  0 AS whrs_sell_in_amount,\n",
					"  0 AS whrs_open_amount,\n",
					"  0 AS whrs_end_amount,\n",
					"  pos_sell_out_quantity,\n",
					"  pos_open_quantity,\n",
					"  pos_end_quantity,\n",
					"  pos_sell_out_amount,\n",
					"  pos_open_amount,\n",
					"  pos_end_amount,\n",
					"  0 AS discount\n",
					"FROM f_pos_data\n",
					"WHERE transaction_date < (SELECT current_month_snapshot FROM forecast_snapshots);\n",
					"\n",
					"-- Podobnie tworzysz normowane dane dla f_wh_data_max_norm\n",
					"\n",
					"-- Łączenie wszystkich znormalizowanych danych\n",
					"CREATE OR REPLACE TEMP VIEW final_data AS\n",
					"SELECT * FROM f_forecast_max_norm\n",
					"UNION ALL\n",
					"SELECT * FROM f_forecast_last_norm\n",
					"UNION ALL\n",
					"SELECT * FROM f_sales_max_norm\n",
					"UNION ALL\n",
					"SELECT * FROM f_pos_data_max_norm\n",
					"UNION ALL\n",
					"SELECT * FROM f_wh_data_max_norm;\n",
					"\n",
					"-- Agregowanie danych\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_data AS\n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  financial_date,\n",
					"  forecast_snapshot,\n",
					"  SUM(quantity) AS quantity,\n",
					"  SUM(amount) AS amount,\n",
					"  AVG(unit_price) AS unit_price,\n",
					"  SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"  SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"  SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"  SUM(whrs_sell_in_amount) AS whrs_sell_in_amount,\n",
					"  SUM(whrs_open_amount) AS whrs_open_amount,\n",
					"  SUM(whrs_end_amount) AS whrs_end_amount,\n",
					"  SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"  SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"  SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"  SUM(pos_sell_out_amount) AS pos_sell_out_amount,\n",
					"  SUM(pos_open_amount) AS pos_open_amount,\n",
					"  SUM(pos_end_amount) AS pos_end_amount,\n",
					"  SUM(discount) AS discount\n",
					"FROM final_data\n",
					"GROUP BY product_id, country_id, financial_date, forecast_snapshot;\n",
					"\n",
					"-- Unpivotowanie danych (jeśli chcesz przekształcić dane do formatu long)\n",
					"CREATE OR REPLACE TEMP VIEW unpivoted_data AS\n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  financial_date,\n",
					"  forecast_snapshot,\n",
					"  original_column,\n",
					"  value,\n",
					"  CASE \n",
					"    WHEN original_column LIKE '%quantity%' THEN 'EA' \n",
					"    WHEN original_column LIKE '%amount%' THEN 'GTS' \n",
					"    ELSE 'unknown' \n",
					"  END AS Measure\n",
					"FROM aggregated_data\n",
					"LATERAL VIEW explode(array('quantity', 'amount', 'whrs_sell_in_quantity', 'whrs_open_quantity', 'whrs_end_quantity', 'whrs_sell_in_amount', 'whrs_open_amount', 'whrs_end_amount', 'pos_sell_out_quantity', 'pos_open_quantity', 'pos_end_quantity', 'pos_sell_out_amount', 'pos_open_amount', 'pos_end_amount', 'discount')) AS original_column\n",
					"WHERE value IS NOT NULL;\n",
					"\n",
					"-- Pivotowanie danych z unpivotowanych\n",
					"CREATE OR REPLACE TEMP VIEW pivoted_data AS\n",
					"SELECT \n",
					"  product_id,\n",
					"  country_id,\n",
					"  financial_date,\n",
					"  forecast_snapshot,\n",
					"  Measure,\n",
					"  MAX(CASE WHEN original_column = 'quantity' THEN value END) AS ExFactory,\n",
					"  MAX(CASE WHEN original_column = 'amount' THEN value END) AS ExFactoryAmount,\n",
					"  -- Dodaj inne kolumny na podstawie potrzeb\n",
					"FROM unpivoted_data\n",
					"GROUP BY product_id, country_id, financial_date, forecast_snapshot, Measure;\n",
					"\n",
					"-- Zapisywanie wyników do tabeli Delta w warstwie Gold\n",
					"CREATE OR REPLACE TABLE delta.`abfss://gold@bigpharma.dfs.core.windows.net/f_planning_book`\n",
					"USING DELTA\n",
					"AS \n",
					"SELECT * FROM pivoted_data;\n",
					"\n",
					""
				],
				"execution_count": null
			}
		]
	}
}