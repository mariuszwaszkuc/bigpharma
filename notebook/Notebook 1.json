{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3579e2b1-4fa4-45de-a0ce-b6e5804d6019"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%%configure -f\n",
					"{\n",
					"    \"conf\": {\n",
					"        \"spark.jars.packages\": \"org.apache.hadoop:hadoop-aws:3.3.1\"\n",
					"    }\n",
					"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"spark._jsc.hadoopConfiguration().set(\"fs.s3a.endpoint\", \"http://20.215.33.25:9000\")\n",
					"spark._jsc.hadoopConfiguration().set(\"fs.s3a.access.key\", \"minioadmin\")\n",
					"spark._jsc.hadoopConfiguration().set(\"fs.s3a.secret.key\", \"minioadmin\")\n",
					"spark._jsc.hadoopConfiguration().set(\"fs.s3a.path.style.access\", \"true\")\n",
					"spark._jsc.hadoopConfiguration().set(\"fs.s3a.connection.ssl.enabled\", \"false\")  # lub \"true\" jeśli masz HTTPS"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"df = spark.read \\\n",
					"    .option(\"header\", \"true\") \\\n",
					"    .option(\"inferSchema\", \"true\") \\\n",
					"    .option(\"recursiveFileLookup\", \"true\") \\\n",
					"    .csv(\"s3a://distributors/\")\n",
					"\n",
					"df.count(*)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import input_file_name\n",
					"\n",
					"# Inicjalizacja sesji Spark\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Incremental Load MinIO to ADLS Gen2\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.endpoint\", \"http://minio.local:9000\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.access.key\", \"YOUR_MINIO_ACCESS_KEY\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.secret.key\", \"YOUR_MINIO_SECRET_KEY\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.connection.maximum\", \"100\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.path.style.access\", \"true\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"# Krok 1: Odczyt listy przetworzonych plików z ADLS\n",
					"# Zakładamy, że przechowujesz nazwę przetworzonych plików w pliku .csv\n",
					"processed = spark.read.csv(\"abfss://datalake@yourstorage.dfs.core.windows.net/processed_files.csv\") \\\n",
					"    .withColumnRenamed(\"_c0\", \"filename\") \\\n",
					"    .rdd.flatMap(lambda x: x).collect()  # Odczytujemy jako listę\n",
					"\n",
					"# Krok 2: Odczytuj pliki z MinIO (wczytujemy wszystkie pliki w folderze)\n",
					"bucket_name = 'your-bucket-name'\n",
					"folder_path = 'your-folder/'\n",
					"\n",
					"# Wczytujemy wszystkie pliki z folderu\n",
					"files_metadata = spark.read \\\n",
					"    .option(\"header\", \"true\") \\\n",
					"    .csv(f\"s3a://{bucket_name}/{folder_path}*\")\n",
					"\n",
					"# Wypisz wszystkie pliki w folderze (dla debugowania)\n",
					"files_metadata.show(truncate=False)\n",
					"\n",
					"# Krok 3: Odfiltruj tylko nowe pliki, które jeszcze nie zostały przetworzone\n",
					"new_files = [file for file in files_metadata.select(input_file_name()).rdd.flatMap(lambda x: x).collect() if file not in processed]\n",
					"\n",
					"# Krok 4: Załaduj nowe pliki do DataFrame\n",
					"if new_files:\n",
					"    df_new = spark.read \\\n",
					"        .option(\"header\", \"true\") \\\n",
					"        .csv(f\"s3a://{bucket_name}/{folder_path}\" + \"{\" + \",\".join(new_files) + \"}\")\n",
					"\n",
					"    # Krok 5: Zapisz nowe dane do ADLS Gen2\n",
					"    df_new.write \\\n",
					"        .mode(\"append\") \\\n",
					"        .parquet(\"abfss://datalake@yourstorage.dfs.core.windows.net/your-target-folder/\")\n",
					"\n",
					"    # Krok 6: Zaktualizuj listę przetworzonych plików w ADLS\n",
					"    new_processed_files = processed + new_files\n",
					"    new_processed_df = spark.createDataFrame([(file,) for file in new_processed_files], [\"filename\"])\n",
					"    new_processed_df.write \\\n",
					"        .mode(\"overwrite\") \\\n",
					"        .csv(\"abfss://datalake@yourstorage.dfs.core.windows.net/processed_files.csv\")\n",
					"\n",
					"    print(f\"Załadowano {len(new_files)} nowych plików.\")\n",
					"else:\n",
					"    print(\"Brak nowych plików do załadowania.\")"
				],
				"execution_count": null
			}
		]
	}
}