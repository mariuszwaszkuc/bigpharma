{
	"name": "test",
	"properties": {
		"folder": {
			"name": "Load_Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "42be7467-ea0e-418c-bae3-c06c5cbca6ea"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"-- test D_CUSTOMERS_LOAD_SQL\n",
					"\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- 1. Rejestracja bronze_customers jako tymczasowy widok\n",
					"CREATE OR REPLACE TEMP VIEW bronze_customers\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/customers/'\n",
					");\n",
					"\n",
					"-- 2. Rejestracja bronze_countries jako tymczasowy widok\n",
					"CREATE OR REPLACE TEMP VIEW bronze_countries\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/countries/'\n",
					");\n",
					"\n",
					"-- 3. Przygotowanie danych – JOIN + wybór najnowszych po customer_id\n",
					"CREATE OR REPLACE TEMP VIEW new_bronze_d_customers AS\n",
					"SELECT \n",
					"    c.customer_id,\n",
					"    c.country_id,\n",
					"    c.company_name,\n",
					"    c.address,\n",
					"    c.city,\n",
					"    co.region_description,\n",
					"    co.country,\n",
					"    co.cluster,\n",
					"    c.update_date as customer_update_date,\n",
					"    co.update_date as country_update_date\n",
					"FROM bronze_customers c\n",
					"JOIN bronze_countries co\n",
					"  ON c.country_id = co.country_id;\n",
					"\n",
					"-- 4. Stworzenie tabeli docelowej jako Delta Lake (jeśli nie istnieje)\n",
					"CREATE TABLE IF NOT EXISTS silver.d_customers\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					"AS\n",
					"SELECT * FROM new_bronze_d_customers\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- 5. Filtrowanie nowych lub zaktualizowanych rekordów\n",
					"CREATE OR REPLACE TEMP VIEW filter_bronze_d_customers AS\n",
					"SELECT * FROM new_bronze_d_customers n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT 1 FROM silver.d_customers s \n",
					"  WHERE s.customer_id = n.customer_id\n",
					"    AND s.country_id = n.country_id\n",
					"    AND s.customer_update_date = n.customer_update_date\n",
					"    AND s.country_update_date = n.country_update_date\n",
					");\n",
					"\n",
					"-- 6. MERGE (UPSERT)\n",
					"MERGE INTO silver.d_customers AS target\n",
					"USING filter_bronze_d_customers AS source\n",
					"ON target.customer_id = source.customer_id\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    country_id = source.country_id,\n",
					"    company_name = source.company_name,\n",
					"    address = source.address,\n",
					"    city = source.city,\n",
					"    region_description = source.region_description,\n",
					"    country = source.country,\n",
					"    cluster = source.cluster,\n",
					"    customer_update_date = source.customer_update_date,\n",
					"    country_update_date = source.country_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    customer_id,\n",
					"    country_id,\n",
					"    company_name,\n",
					"    address,\n",
					"    city,\n",
					"    region_description,\n",
					"    country,\n",
					"    cluster,\n",
					"    customer_update_date,\n",
					"    country_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.customer_id,\n",
					"    source.country_id,\n",
					"    source.company_name,\n",
					"    source.address,\n",
					"    source.city,\n",
					"    source.region_description,\n",
					"    source.country,\n",
					"    source.cluster,\n",
					"    source.customer_update_date,\n",
					"    source.country_update_date\n",
					"  );\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					},
					"collapsed": false
				},
				"source": [
					"drop table silver.d_products"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					},
					"collapsed": false
				},
				"source": [
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Rejestracja danych z Bronze jako tymczasowy widok\n",
					"-- ============================================\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_products\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/products'\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 2. Wybór najnowszych danych wg update_date\n",
					"-- ============================================\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW new_d_products AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    product_name,\n",
					"    brand_name,\n",
					"    sub_brand_name,\n",
					"    category_name,\n",
					"    update_date AS product_update_date\n",
					"FROM bronze_products;\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stworzenie tabeli docelowej (Silver) jeśli nie istnieje\n",
					"-- ============================================\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS silver.d_products\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/d_products'\n",
					"AS\n",
					"SELECT * FROM new_d_products\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- Filtrowanie nowych lub zaktualizowanych rekordów\n",
					"CREATE OR REPLACE TEMP VIEW filter_d_products AS\n",
					"SELECT * FROM new_d_products n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT 1 FROM silver.d_products s \n",
					"  WHERE s.product_id = n.product_id \n",
					"    AND s.product_update_date = n.product_update_date\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 4. MERGE INTO (UPSERT) danych do tabeli Silver\n",
					"-- ============================================\n",
					"\n",
					"MERGE INTO silver.d_products AS target\n",
					"USING filter_d_products AS source\n",
					"ON target.product_id = source.product_id\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.product_name = source.product_name,\n",
					"    target.brand_name = source.brand_name,\n",
					"    target.sub_brand_name = source.sub_brand_name,\n",
					"    target.category_name = source.category_name,\n",
					"    target.product_update_date = source.product_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id,\n",
					"    product_name,\n",
					"    brand_name,\n",
					"    sub_brand_name,\n",
					"    category_name,\n",
					"    product_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id,\n",
					"    source.product_name,\n",
					"    source.brand_name,\n",
					"    source.sub_brand_name,\n",
					"    source.category_name,\n",
					"    source.product_update_date)\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Załaduj dane z warstwy Bronze jako tymczasowy widok\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW bronze_forecast\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/forecast_details'\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 2. Agregacja najnowszych danych na poziomie miesiąca\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_forecast AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    country_id,\n",
					"    max(update_date) as forecast_update_date,\n",
					"    TRUNC(forecast_date, \"MM\") AS forecast_date,\n",
					"    TRUNC(forecast_snapshot, \"MM\") AS forecast_snapshot,\n",
					"    \n",
					"    SUM(quantity) AS quantity,\n",
					"    SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"    SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"    SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"    \n",
					"    SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"    SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"    SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"    ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"    ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"    ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"    \n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price), 2) AS pos_sell_out_amount,\n",
					"    ROUND(SUM(pos_open_quantity * unit_price), 2) AS pos_open_amount,\n",
					"    ROUND(SUM(pos_end_quantity * unit_price), 2) AS pos_end_amount,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"FROM  bronze_forecast\n",
					"GROUP BY product_id, country_id, TRUNC(forecast_date, 'MM'), TRUNC(forecast_snapshot, 'MM');\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stwórz tabelę Silver, jeśli nie istnieje\n",
					"-- ============================================\n",
					"CREATE TABLE IF NOT EXISTS silver.f_forecast\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_forecast'\n",
					"AS\n",
					"SELECT * FROM aggregated_forecast\n",
					"WHERE 1 = 0;\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_forecast AS\n",
					"SELECT * from aggregated_forecast n \n",
					"where  NOT EXISTS (select product_id From silver.f_forecast s \n",
					"                    where s.product_id =n.product_id \n",
					"                      and s.country_id = n.country_id\n",
					"                      and s.forecast_update_date = n.forecast_update_date\n",
					"                      and s.forecast_date = n.forecast_date\n",
					"                      and s.forecast_snapshot= n.forecast_snapshot);\n",
					"\n",
					"-- ============================================\n",
					"-- 4. Wykonaj MERGE INTO, aby zaktualizować lub dodać nowe dane\n",
					"-- ============================================\n",
					"\n",
					"MERGE INTO silver.f_forecast AS target\n",
					"USING filter_aggregated_forecast AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.forecast_date = source.forecast_date\n",
					"   AND target.forecast_snapshot = source.forecast_snapshot\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.quantity = source.quantity,\n",
					"    target.whrs_sell_in_quantity = source.whrs_sell_in_quantity,\n",
					"    target.whrs_open_quantity = source.whrs_open_quantity,\n",
					"    target.whrs_end_quantity = source.whrs_end_quantity,\n",
					"    \n",
					"    target.pos_sell_out_quantity = source.pos_sell_out_quantity,\n",
					"    target.pos_open_quantity = source.pos_open_quantity,\n",
					"    target.pos_end_quantity = source.pos_end_quantity,\n",
					"    \n",
					"    target.amount = source.amount,\n",
					"    target.whrs_sell_in_amount = source.whrs_sell_in_amount,\n",
					"    target.whrs_open_amount = source.whrs_open_amount,\n",
					"    target.whrs_end_amount = source.whrs_end_amount,\n",
					"    \n",
					"    target.pos_sell_out_amount = source.pos_sell_out_amount,\n",
					"    target.pos_open_amount = source.pos_open_amount,\n",
					"    target.pos_end_amount = source.pos_end_amount,\n",
					"    \n",
					"    target.unit_price = source.unit_price,\n",
					"    target.forecast_update_date = source.forecast_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, forecast_date, forecast_snapshot,\n",
					"    quantity, whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    pos_sell_out_quantity, pos_open_quantity, pos_end_quantity,\n",
					"    amount, whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    pos_sell_out_amount, pos_open_amount, pos_end_amount, unit_price,forecast_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id, source.country_id, source.forecast_date, source.forecast_snapshot,\n",
					"    source.quantity, source.whrs_sell_in_quantity, source.whrs_open_quantity, source.whrs_end_quantity,\n",
					"    source.pos_sell_out_quantity, source.pos_open_quantity, source.pos_end_quantity,\n",
					"    source.amount, source.whrs_sell_in_amount, source.whrs_open_amount, source.whrs_end_amount,\n",
					"    source.pos_sell_out_amount, source.pos_open_amount, source.pos_end_amount, source.unit_price,source.forecast_update_date\n",
					"  );"
				],
				"execution_count": 13
			}
		]
	}
}