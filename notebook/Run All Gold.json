{
	"name": "Run All Gold",
	"properties": {
		"folder": {
			"name": "Arch"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "342c3c7a-f633-48c6-93e3-c32b8fb27ce8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, max, coalesce, trunc, lit, add_months\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.functions import to_date\n",
					"\n",
					"# Tworzenie sesji Spark\n",
					"spark = SparkSession.builder.appName(\"Load Planning Book\").getOrCreate()\n",
					"\n",
					"# Parametry dla warstwy Silver (ADLS Gen2)\n",
					"bucket_name = \"abfss://silver@bigpharma.dfs.core.windows.net/\"\n",
					"bucket_name_gold = \"abfss://gold@bigpharma.dfs.core.windows.net/\"\n",
					"\n",
					"# Ścieżki do plików Parquet w ADLS Gen2\n",
					"f_sales_path = f\"{bucket_name}/f_sales\"\n",
					"f_forecast_path = f\"{bucket_name}/f_forecast\"\n",
					"f_pos_data_path = f\"{bucket_name}/f_pos_data\"\n",
					"f_wh_data_path = f\"{bucket_name}/f_wh_data\"\n",
					"\n",
					"# Ścieżka do warstwy Gold (f_planning_book)\n",
					"f_sales_path_gold = f\"{bucket_name_gold}/f_planning_book\"\n",
					"\n",
					"# Załaduj dane z ADLS (tabele f_sales, f_forecast, f_pos_data, f_wh_data)\n",
					"f_sales = spark.read.parquet(f_sales_path)\n",
					"f_forecast = spark.read.parquet(f_forecast_path)\n",
					"f_pos_data = spark.read.parquet(f_pos_data_path)\n",
					"f_wh_data = spark.read.parquet(f_wh_data_path)\n",
					"\n",
					"\n",
					"\n",
					"# Pobranie maksymalnej wartości forecast_snapshot z f_forecast\n",
					"current_month_snapshot = f_forecast.agg(F.max(\"forecast_snapshot\")).collect()[0][0]\n",
					"current_month_snapshot = to_date(lit(current_month_snapshot), \"yyyy-MM-dd\")\n",
					"last_month_snapshot = F.add_months(F.lit(current_month_snapshot), -1)\n",
					"\n",
					"f_forecast_filtered = f_forecast.filter(F.col(\"forecast_snapshot\").isin(current_month_snapshot, last_month_snapshot))\n",
					"\n",
					"# Filtrowanie dla obecnego i poprzedniego miesiąca\n",
					"f_forecast_current = f_forecast_filtered.filter((F.col(\"forecast_date\") >= current_month_snapshot) &(F.col(\"forecast_snapshot\") == current_month_snapshot))\n",
					"f_forecast_last = f_forecast_filtered.filter((F.col(\"forecast_date\") >= last_month_snapshot) &  (F.col(\"forecast_snapshot\") == last_month_snapshot))\n",
					"\n",
					"# Filtrowanie f_sales\n",
					"\n",
					"f_sales_current = f_sales.filter(F.col(\"shipped_date\") < current_month_snapshot)\n",
					"f_sales_last = f_sales.filter(F.col(\"shipped_date\") < last_month_snapshot)\n",
					"\n",
					"f_pos_data_current = f_pos_data.filter(F.col(\"transaction_date\") < current_month_snapshot)\n",
					"f_pos_data_last = f_pos_data.filter(F.col(\"transaction_date\") < last_month_snapshot)\n",
					"\n",
					"f_wh_data_current = f_wh_data.filter(F.col(\"transaction_date\") < current_month_snapshot)\n",
					"f_wh_data_last = f_wh_data.filter(F.col(\"transaction_date\") < last_month_snapshot)\n",
					"\n",
					"\n",
					"# Ujednolicona lista kolumn\n",
					"common_columns = [\n",
					"    \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"    \"quantity\", \"amount\", \"unit_price\",\n",
					"    \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\n",
					"    \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\n",
					"    \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\n",
					"    \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\n",
					"    \"discount\"\n",
					"]\n",
					"\n",
					"# Normalizacja f_forecast (zachowuje oryginalny forecast_snapshot)\n",
					"f_forecast_current_norm = f_forecast_current \\\n",
					"    .withColumnRenamed(\"forecast_date\", \"financial_date\") \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"quantity\", \"amount\", \"unit_price\",\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\n",
					"        \"0.0 as discount\"  # Jeżeli discount jest typu double\n",
					"    )\n",
					"\n",
					"f_forecast_last_norm = f_forecast_last \\\n",
					"    .withColumnRenamed(\"forecast_date\", \"financial_date\") \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"quantity\", \"amount\", \"unit_price\",\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\n",
					"        \"0.0 as discount\"  # Jeżeli discount jest typu double\n",
					"    )\n",
					"\n",
					"\n",
					"\n",
					"# Normalizacja f_sales\n",
					"f_sales_current_norm = f_sales_current \\\n",
					"    .withColumnRenamed(\"shipped_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\",  current_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"quantity\", \"amount\", \"unit_price\",\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\n",
					"        \"discount\"\n",
					"    )\n",
					"\n",
					"f_sales_last_norm = f_sales_last \\\n",
					"    .withColumnRenamed(\"shipped_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"quantity\", \"amount\", \"unit_price\",\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\n",
					"        \"discount\"\n",
					"    )\n",
					"\n",
					"# Normalizacja f_pos_data_path\n",
					"f_pos_data_current_norm = f_pos_data_current \\\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\", current_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\n",
					"        \"0 as discount\"\n",
					"    )\n",
					"\n",
					"f_pos_data_last_norm = f_pos_data_last \\\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\n",
					"        \"0 as discount\"\n",
					"    )\n",
					"\n",
					"# Normalizacja f_wh_data_path\n",
					"f_wh_data_current_norm = f_wh_data_current \\\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\",  current_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\n",
					"        \"0 as discount\"\n",
					"    )\n",
					"\n",
					"f_wh_data_last_norm = f_wh_data_last \\\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\n",
					"    .selectExpr(\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\n",
					"        \"0 as discount\"\n",
					"    )\n",
					"\n",
					"\n",
					"# UNION wszystkich DataFrame'ów\n",
					"\n",
					"f_forecast_current_norm\n",
					"f_forecast_last_norm\n",
					"f_sales_current_norm \n",
					"f_sales_last_norm\n",
					"f_pos_data_current_norm\n",
					"f_pos_data_last_norm\n",
					"f_wh_data_current_norm\n",
					"f_wh_data_last_norm\n",
					"\n",
					"final_df = f_forecast_current_norm.unionByName(f_forecast_last_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_sales_current_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_sales_last_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_pos_data_current_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_pos_data_last_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_wh_data_current_norm, allowMissingColumns=True) \\\n",
					"    .unionByName(f_wh_data_last_norm, allowMissingColumns=True) \n",
					"\n",
					"\n",
					"bucket_name_gold = \"gold\"\n",
					"\n",
					"# Load Data\n",
					"f_sales_path = f\"s3a://{bucket_name}/f_planning_book\"\n",
					"\n",
					"aggregated_df = final_df.groupBy(\n",
					"    \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\"\n",
					").agg(\n",
					"    # Suma dla kolumn liczbowych\n",
					"    F.sum(\"quantity\").alias(\"quantity\"),\n",
					"    F.sum(\"amount\").alias(\"amount\"),\n",
					"    F.avg(\"unit_price\").alias(\"unit_price\"),\n",
					"    \n",
					"    # Suma dla innych kolumn\n",
					"    F.sum(\"whrs_sell_in_quantity\").alias(\"whrs_sell_in_quantity\"),\n",
					"    F.sum(\"whrs_open_quantity\").alias(\"whrs_open_quantity\"),\n",
					"    F.sum(\"whrs_end_quantity\").alias(\"whrs_end_quantity\"),\n",
					"    F.sum(\"whrs_sell_in_amount\").alias(\"whrs_sell_in_amount\"),\n",
					"    F.sum(\"whrs_open_amount\").alias(\"whrs_open_amount\"),\n",
					"    F.sum(\"whrs_end_amount\").alias(\"whrs_end_amount\"),\n",
					"    \n",
					"    F.sum(\"pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\n",
					"    F.sum(\"pos_open_quantity\").alias(\"pos_open_quantity\"),\n",
					"    F.sum(\"pos_end_quantity\").alias(\"pos_end_quantity\"),\n",
					"    F.sum(\"pos_sell_out_amount\").alias(\"pos_sell_out_amount\"),\n",
					"    F.sum(\"pos_open_amount\").alias(\"pos_open_amount\"),\n",
					"    F.sum(\"pos_end_amount\").alias(\"pos_end_amount\"),\n",
					"    \n",
					"    # Agregacja dla discount (średnia)\n",
					"    F.sum(\"discount\").alias(\"discount\")\n",
					")\n",
					"\n",
					"\n",
					"aggregated_df.write.mode(\"overwrite\").parquet(f_sales_path_gold)\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"import pandas as pd\n",
					"\n",
					"# Załaduj dane\n",
					"df_pandas = aggregated_df.toPandas()\n",
					"\n",
					"df_pandas = df_pandas.drop(columns=['discount', 'unit_price'])\n",
					"\n",
					"# Unpivotowanie (melt)\n",
					"df_melted = df_pandas.melt(\n",
					"   id_vars=['product_id', 'country_id', 'financial_date', 'forecast_snapshot'],\n",
					"    var_name=\"original_column\",\n",
					"    value_name=\"value\"\n",
					")\n",
					"\n",
					"\n",
					"# Tworzenie nowej kolumny 'measure' na podstawie obecności 'quantity' lub 'amount' w nazwie kolumny\n",
					"df_melted[\"Measure\"] = df_melted[\"original_column\"].apply(lambda x: \"EA\" if \"quantity\" in x.lower() else \"GTS\" if \"amount\" in x.lower() else \"unknown\")\n",
					"\n",
					"# Mapowanie nazw kolumn na nowe formaty\n",
					"measure_mapping = {\n",
					"    'quantity': 'Ex-Factory',\n",
					"    'amount': 'Ex-Factory',\n",
					"    'whrs_sell_in_quantity': 'Sales to pharmacies',\n",
					"    'whrs_open_quantity': 'Open Stock',\n",
					"    'whrs_end_quantity': 'Close Stock',\n",
					"    'whrs_sell_in_amount': 'Sales to pharmacies',\n",
					"    'whrs_open_amount': 'Open Stock',\n",
					"    'whrs_end_amount': 'Close Stock',\n",
					"    'pos_sell_out_quantity': 'Sales to pharmacies',\n",
					"    'pos_open_quantity': 'Open Stock Pharmacies',\n",
					"    'pos_end_quantity': 'Close Stock Pharmacies',\n",
					"    'pos_sell_out_amount': 'Sales to pharmacies',\n",
					"    'pos_open_amount': 'Open Stock Pharmacies',\n",
					"    'pos_end_amount': 'Close Stock Pharmacies'\n",
					"}\n",
					"\n",
					"# Zastosowanie mapowania\n",
					"df_melted[\"original_column\"] = df_melted[\"original_column\"].replace(measure_mapping)\n",
					"\n",
					"# Usuwamy wiersze z brakującymi wartościami\n",
					"df_melted = df_melted.dropna(subset=[\"original_column\", \"value\"])\n",
					"\n",
					"# Pivotowanie danych\n",
					"df_pivoted = df_melted.pivot_table(\n",
					"    index=['product_id', 'country_id', 'financial_date', 'forecast_snapshot', 'Measure'],  \n",
					"    columns='original_column',\n",
					"    values='value',\n",
					"    aggfunc='first'  # lub 'sum', jeśli chcesz sumować wartości\n",
					").reset_index()\n",
					"\n",
					"# Usunięcie nazwy kolumny po pivotowaniu\n",
					"df_pivoted.columns.name = None\n",
					"\n",
					"\n",
					"# Znalezienie maksymalnej daty\n",
					"max_forecast_snapshot = df_pivoted[\"forecast_snapshot\"].max()\n",
					"\n",
					"# Dodanie kolumny status\n",
					"df_pivoted[\"Version\"] =  df_pivoted[\"forecast_snapshot\"].apply(lambda x: \"Current\" if x == max_forecast_snapshot  else \"Last\")\n",
					"\n",
					"bucket_name_gold = \"abfss://gold@bigpharma.dfs.core.windows.net/f_planning_book_unpivot\"\n",
					"\n",
					"# Ścieżka do warstwy Gold (f_planning_book)\n",
					"f_sales_path_gold = f\"{bucket_name_gold}/f_planning_book_unpivot\"\n",
					"\n",
					"df_spark = spark.createDataFrame(df_pivoted)\n",
					"\n",
					"df_spark=df_spark.withColumnRenamed('product_id', 'IdProduct').withColumnRenamed('country_id', 'IDCountry').withColumnRenamed('financial_date', 'Date').withColumnRenamed('Close Stock', 'Close_Stock').withColumnRenamed('Ex-Factory', 'Ex_Factory').withColumnRenamed('Open Stock', 'Open_Stock').withColumnRenamed('Open Stock Pharmacies', 'Open_Stock_Pharmacies').withColumnRenamed('Sales to pharmacies', 'Sales_to_pharmacies').withColumnRenamed('Close Stock Pharmacies', 'Close_Stock_Pharmacies')\n",
					"\n",
					"\n",
					"df_spark.write.mode(\"overwrite\").format(\"delta\").save(\"abfss://gold@bigpharma.dfs.core.windows.net/f_planning_book_unpivot\")\n",
					"\n",
					""
				],
				"execution_count": null
			}
		]
	}
}