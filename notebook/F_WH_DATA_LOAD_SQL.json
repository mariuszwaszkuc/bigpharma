{
	"name": "F_WH_DATA_LOAD_SQL",
	"properties": {
		"folder": {
			"name": "Load_Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0690f6ab-fe6b-4337-bb2b-983b5e22e346"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"## 1. Load data from Bronze and Customers as temporary views\n",
					"df_bronze = spark.read.option(\"header\", \"true\").csv(\n",
					"    \"abfss://bronze@bigpharma.dfs.core.windows.net/MinIo_Distributors/*/*/*.csv\"\n",
					")\n",
					"df_bronze.createOrReplaceTempView(\"bronze_inventory\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- 1. Create a temporary view from the Silver d_customers table\n",
					"CREATE OR REPLACE TEMP VIEW silver_d_customers\n",
					"USING delta\n",
					"OPTIONS (\n",
					"  path 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					");\n",
					"\n",
					"-- 2. Create the target Silver table as Delta (if it does not exist)\n",
					"CREATE TABLE IF NOT EXISTS silver.f_wh_data (\n",
					"  product_id STRING,\n",
					"  country_id STRING,\n",
					"  transaction_date DATE,\n",
					"  whrs_sell_in_quantity DOUBLE,\n",
					"  whrs_open_quantity DOUBLE,\n",
					"  whrs_end_quantity DOUBLE,\n",
					"  whrs_sell_in_amount DOUBLE,\n",
					"  whrs_open_amount DOUBLE,\n",
					"  whrs_end_amount DOUBLE,\n",
					"  unit_price DOUBLE,\n",
					"  whrs_update_date DATE\n",
					")\n",
					"USING DELTA\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_wh_data/';\n",
					"\n",
					"-- 3. Join and aggregate warehouse data\n",
					"--CREATE OR REPLACE TEMP VIEW aggregated_bronze_wh AS\n",
					"--    WITH join_wh AS (\n",
					"--        SELECT\n",
					"--            inv.*,\n",
					"--            c.country_id\n",
					"--        FROM bronze_inventory inv\n",
					"--        JOIN silver_d_customers c ON inv.customer_id = c.customer_id\n",
					"--    ),\n",
					"--    select_wh AS (\n",
					"--        SELECT\n",
					"--            product_id,\n",
					"--            country_id,\n",
					"--            update_date AS whrs_update_date,\n",
					"--            TRUNC(transaction_date, 'MM') AS transaction_date,\n",
					"--            unit_price,\n",
					"--            whrs_sell_in_quantity,\n",
					"--            whrs_open_quantity,\n",
					"--            whrs_end_quantity\n",
					"--        FROM join_wh\n",
					"--    ),\n",
					"--    aggregated AS (\n",
					"--        SELECT\n",
					"--            product_id,\n",
					"--            country_id,\n",
					"--            transaction_date,\n",
					"--            MAX(whrs_update_date) AS whrs_update_date,\n",
					"--            SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"--            SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"--            SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"--            ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"--            ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"--            ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"--            ROUND(SUM(whrs_sell_in_quantity * unit_price) / NULLIF(SUM(whrs_sell_in_quantity), 0), 2) AS unit_price\n",
					"--        FROM select_wh\n",
					"--        GROUP BY product_id, country_id, transaction_date\n",
					"--    )\n",
					"--SELECT * FROM aggregated;\n",
					"\n",
					"---\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_wh AS\n",
					"WITH join_wh AS (\n",
					"    SELECT\n",
					"        inv.*,\n",
					"        c.country_id\n",
					"    FROM bronze_inventory inv\n",
					"    JOIN silver_d_customers c ON inv.customer_id = c.customer_id\n",
					"),\n",
					"select_wh AS (\n",
					"    SELECT\n",
					"        product_id,\n",
					"        country_id,\n",
					"        update_date AS whrs_update_date,\n",
					"        TRUNC(transaction_date, 'MM') AS transaction_date,\n",
					"        unit_price,\n",
					"        whrs_sell_in_quantity,\n",
					"        whrs_open_quantity,\n",
					"        whrs_end_quantity\n",
					"    FROM join_wh\n",
					"),\n",
					"wh_with_max_update AS (\n",
					"    SELECT\n",
					"        product_id,\n",
					"        country_id,\n",
					"        transaction_date,\n",
					"        whrs_update_date,\n",
					"        unit_price,\n",
					"        whrs_sell_in_quantity,\n",
					"        whrs_open_quantity,\n",
					"        whrs_end_quantity,\n",
					"        MAX(whrs_update_date) OVER (PARTITION BY product_id, country_id, transaction_date) AS max_whrs_update_date\n",
					"    FROM select_wh\n",
					")\n",
					"SELECT\n",
					"    product_id,\n",
					"    country_id,\n",
					"    transaction_date,\n",
					"    whrs_update_date,\n",
					"    SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"    SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"    SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"    ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"    ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"    ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"    ROUND(SUM(whrs_sell_in_quantity * unit_price) / NULLIF(SUM(whrs_sell_in_quantity), 0), 2) AS unit_price\n",
					"FROM wh_with_max_update\n",
					"WHERE whrs_update_date = max_whrs_update_date\n",
					"GROUP BY product_id, country_id, transaction_date, whrs_update_date;\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"-- 4. Filter new or updated records\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_bronze_wh AS\n",
					"SELECT * FROM aggregated_bronze_wh n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT product_id FROM silver.f_wh_data s \n",
					"  WHERE s.product_id = n.product_id \n",
					"    AND s.country_id = n.country_id\n",
					"    AND s.transaction_date = n.transaction_date\n",
					"    AND s.whrs_update_date = n.whrs_update_date\n",
					");\n",
					"\n",
					"-- 5. MERGE the data into the Silver table with aggregation and filtering\n",
					"MERGE INTO silver.f_wh_data AS target\n",
					"USING filter_aggregated_bronze_wh AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.transaction_date = source.transaction_date\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    whrs_sell_in_quantity = source.whrs_sell_in_quantity,\n",
					"    whrs_open_quantity = source.whrs_open_quantity,\n",
					"    whrs_end_quantity = source.whrs_end_quantity,\n",
					"    whrs_sell_in_amount = source.whrs_sell_in_amount,\n",
					"    whrs_open_amount = source.whrs_open_amount,\n",
					"    whrs_end_amount = source.whrs_end_amount,\n",
					"    unit_price = source.unit_price,\n",
					"    whrs_update_date = source.whrs_update_date\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, transaction_date,\n",
					"    whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    unit_price, whrs_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id, source.country_id, source.transaction_date,\n",
					"    source.whrs_sell_in_quantity, source.whrs_open_quantity, source.whrs_end_quantity,\n",
					"    source.whrs_sell_in_amount, source.whrs_open_amount, source.whrs_end_amount,\n",
					"    source.unit_price, source.whrs_update_date\n",
					"  );\n",
					""
				],
				"execution_count": null
			}
		]
	}
}