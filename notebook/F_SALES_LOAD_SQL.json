{
	"name": "F_SALES_LOAD_SQL",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4ed8616c-0c23-418c-8471-702bb5ff3cb8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					},
					"collapsed": false
				},
				"source": [
					"set path_bronze_orders = 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/orders';\n",
					"set path_bronze_order_details = 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/order_details';\n",
					"set path_silver_d_customers = 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers';\n",
					"set path_silver_f_sales = 'abfss://silver@bigpharma.dfs.core.windows.net/f_sales/';\n",
					"\n",
					"\n",
					"-- 1. Tymczasowe widoki na pliki z ADLS Gen2\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_orders\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path ${path_bronze_orders }\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_order_details\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path ${path_bronze_order_details}\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW d_customers\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path ${path_silver_d_customers}\n",
					");\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS f_sales (\n",
					"    country_id STRING,\n",
					"    product_id STRING,\n",
					"    shipped_date DATE,\n",
					"    quantity DOUBLE,\n",
					"    discount DOUBLE,\n",
					"    amount DOUBLE,\n",
					"    unit_price DOUBLE\n",
					")\n",
					"USING DELTA\n",
					"LOCATION ${path_silver_f_sales};\n",
					"\n",
					"-- 3. Przekształcenie i zapis danych do tabeli Silver z użyciem MERGE\n",
					"MERGE INTO f_sales AS silver\n",
					"USING (\n",
					"    WITH orders_trunc AS (\n",
					"        SELECT\n",
					"            order_id,\n",
					"            customer_id,\n",
					"            TRUNC(order_date, 'MM') AS order_date,\n",
					"            TRUNC(required_date, 'MM') AS required_date,\n",
					"            TRUNC(shipped_date, 'MM') AS shipped_date\n",
					"        FROM bronze_orders\n",
					"    ),\n",
					"    joined_orders AS (\n",
					"        SELECT\n",
					"            o.order_id,\n",
					"            c.country_id,\n",
					"            od.product_id,\n",
					"            o.shipped_date,\n",
					"            od.unit_price,\n",
					"            od.quantity,\n",
					"            od.discount,\n",
					"            o.order_date\n",
					"        FROM orders_trunc o\n",
					"        JOIN bronze_order_details od ON o.order_id = od.order_id\n",
					"        JOIN d_customers c ON o.customer_id = c.customer_id\n",
					"    ),\n",
					"    final_orders AS (\n",
					"        SELECT\n",
					"            country_id,\n",
					"            product_id,\n",
					"            shipped_date,\n",
					"            SUM(quantity) AS quantity,\n",
					"            SUM(discount) AS discount,\n",
					"            ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"            ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"        FROM joined_orders\n",
					"        GROUP BY country_id, product_id, shipped_date\n",
					"    )\n",
					"    SELECT * FROM  final_orders\n",
					") AS new_f_sales\n",
					"ON silver.country_id = new_f_sales.country_id\n",
					"   AND silver.product_id = new_f_sales.product_id\n",
					"   AND silver.shipped_date = new_f_sales.shipped_date\n",
					"WHEN MATCHED THEN\n",
					"    UPDATE SET\n",
					"        quantity = new_f_sales.quantity,\n",
					"        discount = new_f_sales.discount,\n",
					"        amount = new_f_sales.amount,\n",
					"        unit_price = new_f_sales.unit_price\n",
					"WHEN NOT MATCHED THEN\n",
					"    INSERT (\n",
					"        country_id, product_id, shipped_date,\n",
					"        quantity, discount, amount, unit_price\n",
					"    )\n",
					"    VALUES (\n",
					"        new_f_sales.country_id, new_f_sales.product_id, new_f_sales.shipped_date,\n",
					"        new_f_sales.quantity, new_f_sales.discount, new_f_sales.amount, new_f_sales.unit_price\n",
					"    );\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"select *From d_customers "
				],
				"execution_count": 18
			}
		]
	}
}