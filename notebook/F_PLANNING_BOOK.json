{
	"name": "F_PLANNING_BOOK",
	"properties": {
		"folder": {
			"name": "Load_Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f9f1c294-1e49-4461-b5f2-63921e11738c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, max, coalesce, trunc, lit, add_months\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.functions import to_date\r\n",
					"\r\n",
					"# Tworzenie sesji Spark\r\n",
					"spark = SparkSession.builder.appName(\"AzureSynapseMigration\").getOrCreate()\r\n",
					"\r\n",
					"# Parametry dla warstwy Silver (ADLS Gen2)\r\n",
					"bucket_name = \"abfss://silver@bigpharma.dfs.core.windows.net/\"\r\n",
					"bucket_name_gold = \"abfss://gold@bigpharma.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"# Ścieżki do plików Parquet w ADLS Gen2\r\n",
					"f_sales_path = f\"{bucket_name}/f_sales\"\r\n",
					"f_forecast_path = f\"{bucket_name}/f_forecast\"\r\n",
					"f_pos_data_path = f\"{bucket_name}/f_pos_data\"\r\n",
					"f_wh_data_path = f\"{bucket_name}/f_wh_data\"\r\n",
					"\r\n",
					"# Ścieżka do warstwy Gold (f_planning_book)\r\n",
					"f_sales_path_gold = f\"{bucket_name_gold}/f_planning_book\"\r\n",
					"\r\n",
					"# Załaduj dane z ADLS (tabele f_sales, f_forecast, f_pos_data, f_wh_data)\r\n",
					"f_sales = spark.read.parquet(f_sales_path)\r\n",
					"f_forecast = spark.read.parquet(f_forecast_path)\r\n",
					"f_pos_data = spark.read.parquet(f_pos_data_path)\r\n",
					"f_wh_data = spark.read.parquet(f_wh_data_path)\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"\r\n",
					"# Pobranie maksymalnej wartości forecast_snapshot z f_forecast\r\n",
					"current_month_snapshot = f_forecast.agg(F.max(\"forecast_snapshot\")).collect()[0][0]\r\n",
					"current_month_snapshot = to_date(lit(current_month_snapshot), \"yyyy-MM-dd\")\r\n",
					"last_month_snapshot = F.add_months(F.lit(current_month_snapshot), -1)\r\n",
					"\r\n",
					"f_forecast_filtered = f_forecast.filter(F.col(\"forecast_snapshot\").isin(current_month_snapshot, last_month_snapshot))\r\n",
					"\r\n",
					"# Filtrowanie dla obecnego i poprzedniego miesiąca\r\n",
					"f_forecast_max = f_forecast_filtered.filter((F.col(\"forecast_date\") >= current_month_snapshot) &(F.col(\"forecast_snapshot\") == current_month_snapshot))\r\n",
					"f_forecast_last = f_forecast_filtered.filter((F.col(\"forecast_date\") >= last_month_snapshot) &  (F.col(\"forecast_snapshot\") == last_month_snapshot))\r\n",
					"\r\n",
					"# Filtrowanie f_sales\r\n",
					"\r\n",
					"f_sales_max = f_sales.filter(F.col(\"shipped_date\") < current_month_snapshot)\r\n",
					"f_sales_last = f_sales.filter(F.col(\"shipped_date\") < last_month_snapshot)\r\n",
					"\r\n",
					"f_pos_data_max = f_pos_data.filter(F.col(\"transaction_date\") < current_month_snapshot)\r\n",
					"f_pos_data_last = f_pos_data.filter(F.col(\"transaction_date\") < last_month_snapshot)\r\n",
					"\r\n",
					"f_wh_data_max = f_wh_data.filter(F.col(\"transaction_date\") < current_month_snapshot)\r\n",
					"f_wh_data_last = f_wh_data.filter(F.col(\"transaction_date\") < last_month_snapshot)\r\n",
					"\r\n",
					"\r\n",
					"# Ujednolicona lista kolumn\r\n",
					"common_columns = [\r\n",
					"    \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"    \"quantity\", \"amount\", \"unit_price\",\r\n",
					"    \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\r\n",
					"    \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\r\n",
					"    \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\r\n",
					"    \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\r\n",
					"    \"discount\"\r\n",
					"]\r\n",
					"\r\n",
					"# Normalizacja f_forecast (zachowuje oryginalny forecast_snapshot)\r\n",
					"f_forecast_max_norm = f_forecast_max \\\r\n",
					"    .withColumnRenamed(\"forecast_date\", \"financial_date\") \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"quantity\", \"amount\", \"unit_price\",\r\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\r\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\r\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\r\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\r\n",
					"        \"0.0 as discount\"  # Jeżeli discount jest typu double\r\n",
					"    )\r\n",
					"\r\n",
					"f_forecast_last_norm = f_forecast_last \\\r\n",
					"    .withColumnRenamed(\"forecast_date\", \"financial_date\") \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"quantity\", \"amount\", \"unit_price\",\r\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\r\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\r\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\r\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\r\n",
					"        \"0.0 as discount\"  # Jeżeli discount jest typu double\r\n",
					"    )\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Normalizacja f_sales\r\n",
					"f_sales_max_norm = f_sales_max \\\r\n",
					"    .withColumnRenamed(\"shipped_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\",  current_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"quantity\", \"amount\", \"unit_price\",\r\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\r\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\r\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\r\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\r\n",
					"        \"discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"f_sales_last_norm = f_sales_last \\\r\n",
					"    .withColumnRenamed(\"shipped_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"quantity\", \"amount\", \"unit_price\",\r\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\r\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\r\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\r\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\r\n",
					"        \"discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"# Normalizacja f_pos_data_path\r\n",
					"f_pos_data_max_norm = f_pos_data_max \\\r\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\", current_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\r\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\r\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\r\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\r\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\r\n",
					"        \"0 as discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"f_pos_data_last_norm = f_pos_data_last \\\r\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\r\n",
					"        \"0 as whrs_sell_in_quantity\", \"0 as whrs_open_quantity\", \"0 as whrs_end_quantity\",\r\n",
					"        \"0 as whrs_sell_in_amount\", \"0 as whrs_open_amount\", \"0 as whrs_end_amount\",\r\n",
					"        \"pos_sell_out_quantity\", \"pos_open_quantity\", \"pos_end_quantity\",\r\n",
					"        \"pos_sell_out_amount\", \"pos_open_amount\", \"pos_end_amount\",\r\n",
					"        \"0 as discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"# Normalizacja f_wh_data_path\r\n",
					"f_wh_data_max_norm = f_wh_data_max \\\r\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\",  current_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\r\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\r\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\r\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\r\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\r\n",
					"        \"0 as discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"f_wh_data_last_norm = f_wh_data_last \\\r\n",
					"    .withColumnRenamed(\"transaction_date\", \"financial_date\") \\\r\n",
					"    .withColumn(\"forecast_snapshot\", last_month_snapshot) \\\r\n",
					"    .selectExpr(\r\n",
					"        \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\",\r\n",
					"        \"0 as quantity\", \"0 as amount\", \"unit_price\",\r\n",
					"        \"whrs_sell_in_quantity\", \"whrs_open_quantity\", \"whrs_end_quantity\",\r\n",
					"        \"whrs_sell_in_amount\", \"whrs_open_amount\", \"whrs_end_amount\",\r\n",
					"        \"0 as pos_sell_out_quantity\", \"0 as pos_open_quantity\", \"0 as pos_end_quantity\",\r\n",
					"        \"0 as pos_sell_out_amount\", \"0 as pos_open_amount\", \"0 as pos_end_amount\",\r\n",
					"        \"0 as discount\"\r\n",
					"    )\r\n",
					"\r\n",
					"\r\n",
					"# UNION wszystkich DataFrame'ów\r\n",
					"\r\n",
					"f_forecast_max_norm\r\n",
					"f_forecast_last_norm\r\n",
					"f_sales_max_norm \r\n",
					"f_sales_last_norm\r\n",
					"f_pos_data_max_norm\r\n",
					"f_pos_data_last_norm\r\n",
					"f_wh_data_max_norm\r\n",
					"f_wh_data_last_norm\r\n",
					"\r\n",
					"final_df = f_forecast_max_norm.unionByName(f_forecast_last_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_sales_max_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_sales_last_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_pos_data_max_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_pos_data_last_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_wh_data_max_norm, allowMissingColumns=True) \\\r\n",
					"    .unionByName(f_wh_data_last_norm, allowMissingColumns=True) \r\n",
					"\r\n",
					"\r\n",
					"bucket_name_gold = \"gold\"\r\n",
					"\r\n",
					"# Load Data\r\n",
					"f_sales_path = f\"s3a://{bucket_name}/f_planning_book\"\r\n",
					"\r\n",
					"aggregated_df = final_df.groupBy(\r\n",
					"    \"product_id\", \"country_id\", \"financial_date\", \"forecast_snapshot\"\r\n",
					").agg(\r\n",
					"    # Suma dla kolumn liczbowych\r\n",
					"    F.sum(\"quantity\").alias(\"quantity\"),\r\n",
					"    F.sum(\"amount\").alias(\"amount\"),\r\n",
					"    F.avg(\"unit_price\").alias(\"unit_price\"),\r\n",
					"    \r\n",
					"    # Suma dla innych kolumn\r\n",
					"    F.sum(\"whrs_sell_in_quantity\").alias(\"whrs_sell_in_quantity\"),\r\n",
					"    F.sum(\"whrs_open_quantity\").alias(\"whrs_open_quantity\"),\r\n",
					"    F.sum(\"whrs_end_quantity\").alias(\"whrs_end_quantity\"),\r\n",
					"    F.sum(\"whrs_sell_in_amount\").alias(\"whrs_sell_in_amount\"),\r\n",
					"    F.sum(\"whrs_open_amount\").alias(\"whrs_open_amount\"),\r\n",
					"    F.sum(\"whrs_end_amount\").alias(\"whrs_end_amount\"),\r\n",
					"    \r\n",
					"    F.sum(\"pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\r\n",
					"    F.sum(\"pos_open_quantity\").alias(\"pos_open_quantity\"),\r\n",
					"    F.sum(\"pos_end_quantity\").alias(\"pos_end_quantity\"),\r\n",
					"    F.sum(\"pos_sell_out_amount\").alias(\"pos_sell_out_amount\"),\r\n",
					"    F.sum(\"pos_open_amount\").alias(\"pos_open_amount\"),\r\n",
					"    F.sum(\"pos_end_amount\").alias(\"pos_end_amount\"),\r\n",
					"    \r\n",
					"    # Agregacja dla discount (średnia)\r\n",
					"    F.sum(\"discount\").alias(\"discount\")\r\n",
					")\r\n",
					"\r\n",
					"\r\n",
					"aggregated_df.write.mode(\"overwrite\").parquet(f_sales_path_gold)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}