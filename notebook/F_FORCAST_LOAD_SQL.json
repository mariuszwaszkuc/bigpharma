{
	"name": "F_FORCAST_LOAD_SQL",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "91bd239c-dfb1-472a-ae1a-3669b66ba26d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"set path_bronze_forecast = 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/forecast_details';\n",
					"set path_silver_f_forecast = 'abfss://silver@bigpharma.dfs.core.windows.net/f_forecast';\n",
					"\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Załaduj dane z warstwy Bronze jako tymczasowy widok\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW bronze_forecast\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path ${path_bronze_forecast}\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 2. Agregacja najnowszych danych na poziomie miesiąca\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_forecast AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    country_id,\n",
					"    TRUNC(forecast_date, \"MM\") AS forecast_date,\n",
					"    TRUNC(forecast_snapshot, \"MM\") AS forecast_snapshot,\n",
					"    \n",
					"    SUM(quantity) AS quantity,\n",
					"    SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"    SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"    SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"    \n",
					"    SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"    SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"    SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"    ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"    ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"    ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"    \n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price), 2) AS pos_sell_out_amount,\n",
					"    ROUND(SUM(pos_open_quantity * unit_price), 2) AS pos_open_amount,\n",
					"    ROUND(SUM(pos_end_quantity * unit_price), 2) AS pos_end_amount,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"FROM  bronze_forecast\n",
					"GROUP BY product_id, country_id, TRUNC(forecast_date, \"MM\"), TRUNC(forecast_snapshot, \"MM\");\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stwórz tabelę Silver, jeśli nie istnieje\n",
					"-- ============================================\n",
					"CREATE TABLE IF NOT EXISTS silver_f_forecast\n",
					"USING delta\n",
					"LOCATION ${path_silver_f_forecast}\n",
					"AS\n",
					"SELECT * FROM aggregated_forecast\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- ============================================\n",
					"-- 4. Wykonaj MERGE INTO, aby zaktualizować lub dodać nowe dane\n",
					"-- ============================================\n",
					"MERGE INTO silver_forecast AS target\n",
					"USING aggregated_forecast AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.forecast_date = source.forecast_date\n",
					"   AND target.forecast_snapshot = source.forecast_snapshot\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.quantity = source.quantity,\n",
					"    target.whrs_sell_in_quantity = source.whrs_sell_in_quantity,\n",
					"    target.whrs_open_quantity = source.whrs_open_quantity,\n",
					"    target.whrs_end_quantity = source.whrs_end_quantity,\n",
					"    \n",
					"    target.pos_sell_out_quantity = source.pos_sell_out_quantity,\n",
					"    target.pos_open_quantity = source.pos_open_quantity,\n",
					"    target.pos_end_quantity = source.pos_end_quantity,\n",
					"    \n",
					"    target.amount = source.amount,\n",
					"    target.whrs_sell_in_amount = source.whrs_sell_in_amount,\n",
					"    target.whrs_open_amount = source.whrs_open_amount,\n",
					"    target.whrs_end_amount = source.whrs_end_amount,\n",
					"    \n",
					"    target.pos_sell_out_amount = source.pos_sell_out_amount,\n",
					"    target.pos_open_amount = source.pos_open_amount,\n",
					"    target.pos_end_amount = source.pos_end_amount,\n",
					"    \n",
					"    target.unit_price = source.unit_price\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, forecast_date, forecast_snapshot,\n",
					"    quantity, whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    pos_sell_out_quantity, pos_open_quantity, pos_end_quantity,\n",
					"    amount, whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    pos_sell_out_amount, pos_open_amount, pos_end_amount, unit_price\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id, source.country_id, source.forecast_date, source.forecast_snapshot,\n",
					"    source.quantity, source.whrs_sell_in_quantity, source.whrs_open_quantity, source.whrs_end_quantity,\n",
					"    source.pos_sell_out_quantity, source.pos_open_quantity, source.pos_end_quantity,\n",
					"    source.amount, source.whrs_sell_in_amount, source.whrs_open_amount, source.whrs_end_amount,\n",
					"    source.pos_sell_out_amount, source.pos_open_amount, source.pos_end_amount, source.unit_price\n",
					"  );\n",
					""
				],
				"execution_count": null
			}
		]
	}
}