{
	"name": "F_PRODUCT_LOAD",
	"properties": {
		"folder": {
			"name": "Load_Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5561afa6-8127-45dc-9c3b-2bf912807ca4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, max, coalesce, trunc\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql import functions as F\r\n",
					"\r\n",
					"# Parametry dla warstwy Bronze (ADLS Gen2)\r\n",
					"bronze_bucket_name = \"abfss://bronze@bigpharma.dfs.core.windows.net/\"\r\n",
					"bronze_prefix = \"Erp/\"\r\n",
					"file_name = \"products\"  # Zmieniamy na odpowiednią nazwę pliku\r\n",
					"\r\n",
					"# Parametry dla warstwy Silver (ADLS Gen2)\r\n",
					"silver_bucket_name = \"abfss://silver@bigpharma.dfs.core.windows.net/\"\r\n",
					"silver_prefix = \"d_products/\"\r\n",
					"\r\n",
					"# Ścieżki do plików Parquet w ADLS Gen2\r\n",
					"path = f\"{bronze_bucket_name}{bronze_prefix}{file_name}\"\r\n",
					"\r\n",
					"# Ścieżka do warstwy Silver\r\n",
					"silver_path = f\"{silver_bucket_name}{silver_prefix}\"\r\n",
					"\r\n",
					"# Załaduj dane z ADLS (tabela products)\r\n",
					"products_df = spark.read.parquet(path)\r\n",
					"\r\n",
					"# Wyświetlenie pierwszych wierszy dla weryfikacji\r\n",
					"products_df.show(5)\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"\r\n",
					"#products_df.show()\r\n",
					"\r\n",
					"latest_products_df = products_df.withColumn(\"max_order_date\", F.max(\"update_date\").over(Window.partitionBy(\"product_id\"))).filter(F.col(\"update_date\") == F.col(\"max_order_date\"))\r\n",
					"\r\n",
					"\r\n",
					"# Wybór odpowiednich kolumn do zapisania w warstwie Silver\r\n",
					"new_products_df = latest_products_df.select(\r\n",
					"    \"product_id\", \r\n",
					"    \"product_name\", \r\n",
					"    \"brand_name\", \r\n",
					"    \"sub_brand_name\", \r\n",
					"    \"category_name\")\r\n",
					"\r\n",
					"\r\n",
					"# Sprawdzenie, czy tabela Silver już istnieje\r\n",
					"try:\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    silver_exists = True\r\n",
					"except:\r\n",
					"    silver_exists = False\r\n",
					"if silver_exists:\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    \r\n",
					"    merged_df = silver_df.alias(\"silver\").join(\r\n",
					"        new_products_df.alias(\"new_products\"),\r\n",
					"        (F.col(\"silver.product_id\") == F.col(\"new_products.product_id\")),\r\n",
					"        how=\"outer\"\r\n",
					"        )\r\n",
					"\r\n",
					"        # Wybór kolumn, które mają zostać zaktualizowane lub dodane\r\n",
					"    final_df = merged_df.select(\r\n",
					"        F.coalesce(\"new_products.product_id\", \"silver.product_id\").alias(\"product_id\"),\r\n",
					"        F.coalesce(\"new_products.product_name\", \"silver.product_name\").alias(\"product_name\"),\r\n",
					"        F.coalesce(\"new_products.brand_name\", \"silver.brand_name\").alias(\"brand_name\"),\r\n",
					"        F.coalesce(\"new_products.sub_brand_name\", \"silver.sub_brand_name\").alias(\"sub_brand_name\"),\r\n",
					"        F.coalesce(\"new_products.category_name\", \"silver.category_name\").alias(\"category_name\")\r\n",
					"    )\r\n",
					"else:\r\n",
					"\r\n",
					"    new_products_df.write.mode(\"overwrite\").parquet(silver_path)\r\n",
					"\r\n",
					"# Zakończenie\r\n",
					"print(\"Inkrementalne ładowanie zakończone!\")    \r\n",
					"\r\n",
					"\r\n",
					"spark.stop()"
				]
			}
		]
	}
}