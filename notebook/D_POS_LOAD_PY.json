{
	"name": "D_POS_LOAD_PY",
	"properties": {
		"folder": {
			"name": "Arch/Gold/Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c61abd19-cd7f-4fd8-9d9e-1f8b7dc3514b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, max, coalesce, trunc\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql import functions as F\r\n",
					"\r\n",
					"\r\n",
					"spark = SparkSession.builder.appName(\"AzureSynapseMigration\").getOrCreate()\r\n",
					"\r\n",
					"# Parametry dla warstwy Bronze (ADLS Gen2)\r\n",
					"bronze_bucket_name = \"abfss://bronze@bigpharma.dfs.core.windows.net/\"\r\n",
					"bronze_prefix = \"Erp/\"\r\n",
					"file_name = \"inventory_pos_history_details\"\r\n",
					"\r\n",
					"# Parametry dla warstwy Silver (ADLS Gen2)\r\n",
					"silver_bucket_name = \"abfss://silver@bigpharma.dfs.core.windows.net/\"\r\n",
					"silver_prefix = \"f_pos_data/\"\r\n",
					"\r\n",
					"# Ścieżki do plików Parquet w ADLS Gen2\r\n",
					"path = f\"{bronze_bucket_name}{bronze_prefix}{file_name}\"\r\n",
					"\r\n",
					"# Ścieżka do warstwy Silver\r\n",
					"silver_path = f\"{silver_bucket_name}{silver_prefix}\"\r\n",
					"\r\n",
					"# Załaduj dane z ADLS (tabela inventory_pos_history_details)\r\n",
					"bronze_df = spark.read.parquet(path)\r\n",
					"\r\n",
					"\r\n",
					"bronze_df = spark.read.parquet(path)\r\n",
					"\r\n",
					"latest_bronze_df = bronze_df.withColumn(\"max_order_date\", F.max(\"update_date\").over(Window.partitionBy(\"product_id\", \"country_id\",\"update_date\"))).filter(F.col(\"update_date\") == F.col(\"max_order_date\"))\r\n",
					"\r\n",
					"new_bronze_df = latest_bronze_df.select(\r\n",
					"    \"product_id\",\r\n",
					"    \"country_id\", \r\n",
					"    \"transaction_date\", \r\n",
					"    \"unit_price\", \r\n",
					"    \"pos_sell_out_quantity\",\r\n",
					"    \"pos_open_quantity\",  # Poprawiona nazwa\r\n",
					"    \"pos_end_quantity\"\r\n",
					")\r\n",
					"\r\n",
					"new_bronze_df = new_bronze_df.withColumn(\r\n",
					"    \"transaction_date\", trunc(\"transaction_date\",\"month\"))\r\n",
					"\r\n",
					"aggregated_bronze_df = new_bronze_df.groupBy(\"product_id\", \"country_id\", \"transaction_date\").agg(\r\n",
					"                                    # Summing quantity, discount, and amount\r\n",
					"                                     F.sum(\"pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\r\n",
					"                                     F.sum(\"pos_open_quantity\").alias(\"pos_open_quantity\"),\r\n",
					"                                     F.sum(\"pos_end_quantity\").alias(\"pos_end_quantity\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_sell_out_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_sell_out_amount\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_open_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_open_amount\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_end_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_end_amount\"),\r\n",
					"                                     F.round((F.sum(F.col(\"pos_sell_out_quantity\") * F.col(\"unit_price\")) / F.sum(\"pos_sell_out_quantity\")),2).alias(\"unit_price\"))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Sprawdzenie, czy tabela Silver już istnieje\r\n",
					"try:\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    silver_exists = True\r\n",
					"except:\r\n",
					"    silver_exists = False\r\n",
					"\r\n",
					"\r\n",
					"# Jeśli tabela Silver istnieje, wykonaj operację \"MERGE\" na podstawie DataFrame\r\n",
					"if silver_exists:\r\n",
					"    # Załaduj dane z tabeli Silver\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    \r\n",
					"    # Połącz dane Silver z nowymi danymi (na podstawie order_id, customer_id, product_id)\r\n",
					"    merged_df = silver_df.alias(\"silver\").join(\r\n",
					"        aggregated_bronze_df.alias(\"new_pod\"),\r\n",
					"        (F.col(\"silver.product_id\") == F.col(\"new_pod.product_id\")) & \r\n",
					"        (F.col(\"silver.country_id\") == F.col(\"new_pod.country_id\")) & \r\n",
					"        (F.col(\"silver.transaction_date\") == F.col(\"new_pod.transaction_date\")),\r\n",
					"        how=\"outer\"\r\n",
					"    )\r\n",
					"\r\n",
					"    # Wybór kolumn, które mają zostać zaktualizowane lub dodane\r\n",
					"    final_df = merged_df.select(\r\n",
					"        F.coalesce(\"new_pod.product_id\", \"silver.product_id\").alias(\"product_id\"),\r\n",
					"        F.coalesce(\"new_pod.country_id\", \"silver.country_id\").alias(\"country_id\"),\r\n",
					"        F.coalesce(\"new_pod.transaction_date\", \"silver.transaction_date\").alias(\"transaction_date\"),\r\n",
					"        F.coalesce(\"new_pod.pos_sell_out_quantity\", \"silver.pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_open_quantity\", \"silver.pos_open_quantity\").alias(\"pos_open_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_end_quantity\", \"silver.pos_end_quantity\").alias(\"pos_end_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_sell_out_amount\", \"silver.pos_sell_out_amount\").alias(\"pos_sell_out_amount\"),\r\n",
					"        F.coalesce(\"new_pod.pos_open_amount\", \"silver.pos_open_amount\").alias(\"pos_open_amount\"),\r\n",
					"        F.coalesce(\"new_pod.pos_end_amount\", \"silver.pos_end_amount\").alias(\"pos_end_amount\"),\r\n",
					"        F.coalesce(\"new_pod.unit_price\", \"silver.unit_price\").alias(\"unit_price\")\r\n",
					"        )\r\n",
					"    # Display or save the resulting DataFrame\r\n",
					"    # Zapisanie zaktualizowanego DataFrame do warstwy Silver\r\n",
					"    final_df.write.mode(\"overwrite\").parquet(silver_path)\r\n",
					"\r\n",
					"else:\r\n",
					"    aggregated_bronze_df.write.mode(\"overwrite\").parquet(silver_path)\r\n",
					"\r\n",
					"# Zakończenie\r\n",
					"print(\"Inkrementalne ładowanie zakończone!\")\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"\r\n",
					"bronze_df = spark.read.parquet(path)\r\n",
					"\r\n",
					"latest_bronze_df = bronze_df.withColumn(\"max_order_date\", F.max(\"update_date\").over(Window.partitionBy(\"product_id\", \"country_id\",\"update_date\"))).filter(F.col(\"update_date\") == F.col(\"max_order_date\"))\r\n",
					"\r\n",
					"new_bronze_df = latest_bronze_df.select(\r\n",
					"    \"product_id\",\r\n",
					"    \"country_id\", \r\n",
					"    \"transaction_date\", \r\n",
					"    \"unit_price\", \r\n",
					"    \"pos_sell_out_quantity\",\r\n",
					"    \"pos_open_quantity\",  # Poprawiona nazwa\r\n",
					"    \"pos_end_quantity\"\r\n",
					")\r\n",
					"\r\n",
					"new_bronze_df = new_bronze_df.withColumn(\r\n",
					"    \"transaction_date\", trunc(\"transaction_date\",\"month\"))\r\n",
					"\r\n",
					"aggregated_bronze_df = new_bronze_df.groupBy(\"product_id\", \"country_id\", \"transaction_date\").agg(\r\n",
					"                                    # Summing quantity, discount, and amount\r\n",
					"                                     F.sum(\"pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\r\n",
					"                                     F.sum(\"pos_open_quantity\").alias(\"pos_open_quantity\"),\r\n",
					"                                     F.sum(\"pos_end_quantity\").alias(\"pos_end_quantity\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_sell_out_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_sell_out_amount\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_open_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_open_amount\"),\r\n",
					"                                     F.round(F.sum(F.col(\"pos_end_quantity\") * F.col(\"unit_price\")),2).alias(\"pos_end_amount\"),\r\n",
					"                                     F.round((F.sum(F.col(\"pos_sell_out_quantity\") * F.col(\"unit_price\")) / F.sum(\"pos_sell_out_quantity\")),2).alias(\"unit_price\"))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Sprawdzenie, czy tabela Silver już istnieje\r\n",
					"try:\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    silver_exists = True\r\n",
					"except:\r\n",
					"    silver_exists = False\r\n",
					"\r\n",
					"\r\n",
					"# Jeśli tabela Silver istnieje, wykonaj operację \"MERGE\" na podstawie DataFrame\r\n",
					"if silver_exists:\r\n",
					"    # Załaduj dane z tabeli Silver\r\n",
					"    silver_df = spark.read.parquet(silver_path)\r\n",
					"    \r\n",
					"    # Połącz dane Silver z nowymi danymi (na podstawie order_id, customer_id, product_id)\r\n",
					"    merged_df = silver_df.alias(\"silver\").join(\r\n",
					"        aggregated_bronze_df.alias(\"new_pod\"),\r\n",
					"        (F.col(\"silver.product_id\") == F.col(\"new_pod.product_id\")) & \r\n",
					"        (F.col(\"silver.country_id\") == F.col(\"new_pod.country_id\")) & \r\n",
					"        (F.col(\"silver.transaction_date\") == F.col(\"new_pod.transaction_date\")),\r\n",
					"        how=\"outer\"\r\n",
					"    )\r\n",
					"\r\n",
					"    # Wybór kolumn, które mają zostać zaktualizowane lub dodane\r\n",
					"    final_df = merged_df.select(\r\n",
					"        F.coalesce(\"new_pod.product_id\", \"silver.product_id\").alias(\"product_id\"),\r\n",
					"        F.coalesce(\"new_pod.country_id\", \"silver.country_id\").alias(\"country_id\"),\r\n",
					"        F.coalesce(\"new_pod.transaction_date\", \"silver.transaction_date\").alias(\"transaction_date\"),\r\n",
					"        F.coalesce(\"new_pod.pos_sell_out_quantity\", \"silver.pos_sell_out_quantity\").alias(\"pos_sell_out_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_open_quantity\", \"silver.pos_open_quantity\").alias(\"pos_open_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_end_quantity\", \"silver.pos_end_quantity\").alias(\"pos_end_quantity\"),\r\n",
					"        F.coalesce(\"new_pod.pos_sell_out_amount\", \"silver.pos_sell_out_amount\").alias(\"pos_sell_out_amount\"),\r\n",
					"        F.coalesce(\"new_pod.pos_open_amount\", \"silver.pos_open_amount\").alias(\"pos_open_amount\"),\r\n",
					"        F.coalesce(\"new_pod.pos_end_amount\", \"silver.pos_end_amount\").alias(\"pos_end_amount\"),\r\n",
					"        F.coalesce(\"new_pod.unit_price\", \"silver.unit_price\").alias(\"unit_price\")\r\n",
					"        )\r\n",
					"    # Display or save the resulting DataFrame\r\n",
					"    # Zapisanie zaktualizowanego DataFrame do warstwy Silver\r\n",
					"    final_df.write.mode(\"overwrite\").parquet(silver_path)\r\n",
					"\r\n",
					"else:\r\n",
					"    aggregated_bronze_df.write.mode(\"overwrite\").parquet(silver_path)\r\n",
					"\r\n",
					"# Zakończenie\r\n",
					"print(\"Inkrementalne ładowanie zakończone!\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}