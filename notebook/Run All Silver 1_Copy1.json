{
	"name": "Run All Silver 1_Copy1",
	"properties": {
		"folder": {
			"name": "Archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fdbfeb59-b2fb-4e20-bd4a-e6787e68594c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"--D_CUSTOMERS_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- 1. Rejestracja bronze_customers jako tymczasowy widok\n",
					"CREATE OR REPLACE TEMP VIEW bronze_customers\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/customers/'\n",
					");\n",
					"\n",
					"-- 2. Rejestracja bronze_countries jako tymczasowy widok\n",
					"CREATE OR REPLACE TEMP VIEW bronze_countries\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/countries/'\n",
					");\n",
					"\n",
					"-- 3. Przygotowanie danych – JOIN + wybór najnowszych po customer_id\n",
					"CREATE OR REPLACE TEMP VIEW new_bronze_d_customers AS\n",
					"SELECT \n",
					"    c.customer_id,\n",
					"    c.country_id,\n",
					"    c.company_name,\n",
					"    c.address,\n",
					"    c.city,\n",
					"    co.region_description,\n",
					"    co.country,\n",
					"    co.cluster,\n",
					"    c.update_date as customer_update_date,\n",
					"    co.update_date as country_update_date\n",
					"FROM bronze_customers c\n",
					"JOIN bronze_countries co\n",
					"  ON c.country_id = co.country_id;\n",
					"\n",
					"-- 4. Stworzenie tabeli docelowej jako Delta Lake (jeśli nie istnieje)\n",
					"CREATE TABLE IF NOT EXISTS silver.d_customers\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					"AS\n",
					"SELECT * FROM new_bronze_d_customers\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- 5. Filtrowanie nowych lub zaktualizowanych rekordów\n",
					"CREATE OR REPLACE TEMP VIEW filter_bronze_d_customers AS\n",
					"SELECT * FROM new_bronze_d_customers n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT 1 FROM silver.d_customers s \n",
					"  WHERE s.customer_id = n.customer_id\n",
					"    AND s.country_id = n.country_id\n",
					"    AND s.customer_update_date = n.customer_update_date\n",
					"    AND s.country_update_date = n.country_update_date\n",
					");\n",
					"\n",
					"-- 6. MERGE (UPSERT)\n",
					"MERGE INTO silver.d_customers AS target\n",
					"USING filter_bronze_d_customers AS source\n",
					"ON target.customer_id = source.customer_id\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    country_id = source.country_id,\n",
					"    company_name = source.company_name,\n",
					"    address = source.address,\n",
					"    city = source.city,\n",
					"    region_description = source.region_description,\n",
					"    country = source.country,\n",
					"    cluster = source.cluster,\n",
					"    customer_update_date = source.customer_update_date,\n",
					"    country_update_date = source.country_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    customer_id,\n",
					"    country_id,\n",
					"    company_name,\n",
					"    address,\n",
					"    city,\n",
					"    region_description,\n",
					"    country,\n",
					"    cluster,\n",
					"    customer_update_date,\n",
					"    country_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.customer_id,\n",
					"    source.country_id,\n",
					"    source.company_name,\n",
					"    source.address,\n",
					"    source.city,\n",
					"    source.region_description,\n",
					"    source.country,\n",
					"    source.cluster,\n",
					"    source.customer_update_date,\n",
					"    source.country_update_date\n",
					"  );"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"--D_PRODUCTS_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Rejestracja danych z Bronze jako tymczasowy widok\n",
					"-- ============================================\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_products\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/products'\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 2. Wybór najnowszych danych wg update_date\n",
					"-- ============================================\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW new_d_products AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    product_name,\n",
					"    brand_name,\n",
					"    sub_brand_name,\n",
					"    category_name,\n",
					"    update_date AS product_update_date\n",
					"FROM bronze_products;\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stworzenie tabeli docelowej (Silver) jeśli nie istnieje\n",
					"-- ============================================\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS silver.d_products\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/d_products'\n",
					"AS\n",
					"SELECT * FROM new_d_products\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- Filtrowanie nowych lub zaktualizowanych rekordów\n",
					"CREATE OR REPLACE TEMP VIEW filter_d_products AS\n",
					"SELECT * FROM new_d_products n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT 1 FROM silver.d_products s \n",
					"  WHERE s.product_id = n.product_id \n",
					"    AND s.product_update_date = n.product_update_date\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 4. MERGE INTO (UPSERT) danych do tabeli Silver\n",
					"-- ============================================\n",
					"\n",
					"MERGE INTO silver.d_products AS target\n",
					"USING filter_d_products AS source\n",
					"ON target.product_id = source.product_id\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.product_name = source.product_name,\n",
					"    target.brand_name = source.brand_name,\n",
					"    target.sub_brand_name = source.sub_brand_name,\n",
					"    target.category_name = source.category_name,\n",
					"    target.product_update_date = source.product_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id,\n",
					"    product_name,\n",
					"    brand_name,\n",
					"    sub_brand_name,\n",
					"    category_name,\n",
					"    product_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id,\n",
					"    source.product_name,\n",
					"    source.brand_name,\n",
					"    source.sub_brand_name,\n",
					"    source.category_name,\n",
					"    source.product_update_date);"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"--F_FORCAST_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Załaduj dane z warstwy Bronze jako tymczasowy widok\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW bronze_forecast\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/forecast_details'\n",
					");\n",
					"\n",
					"-- ============================================\n",
					"-- 2. Agregacja najnowszych danych na poziomie miesiąca\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_forecast AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    country_id,\n",
					"    max(update_date) as forecast_update_date,\n",
					"    TRUNC(forecast_date, \"MM\") AS forecast_date,\n",
					"    TRUNC(forecast_snapshot, \"MM\") AS forecast_snapshot,\n",
					"    \n",
					"    SUM(quantity) AS quantity,\n",
					"    SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"    SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"    SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"    \n",
					"    SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"    SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"    SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"    ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"    ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"    ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"    \n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price), 2) AS pos_sell_out_amount,\n",
					"    ROUND(SUM(pos_open_quantity * unit_price), 2) AS pos_open_amount,\n",
					"    ROUND(SUM(pos_end_quantity * unit_price), 2) AS pos_end_amount,\n",
					"    \n",
					"    ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"FROM  bronze_forecast\n",
					"GROUP BY product_id, country_id, TRUNC(forecast_date, 'MM'), TRUNC(forecast_snapshot, 'MM');\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stwórz tabelę Silver, jeśli nie istnieje\n",
					"-- ============================================\n",
					"CREATE TABLE IF NOT EXISTS silver.f_forecast\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_forecast'\n",
					"AS\n",
					"SELECT * FROM aggregated_forecast\n",
					"WHERE 1 = 0;\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_forecast AS\n",
					"SELECT * from aggregated_forecast n \n",
					"where  NOT EXISTS (select product_id From silver.f_forecast s \n",
					"                    where s.product_id =n.product_id \n",
					"                      and s.country_id = n.country_id\n",
					"                      and s.forecast_update_date = n.forecast_update_date\n",
					"                      and s.forecast_date = n.forecast_date\n",
					"                      and s.forecast_snapshot= n.forecast_snapshot);\n",
					"\n",
					"-- ============================================\n",
					"-- 4. Wykonaj MERGE INTO, aby zaktualizować lub dodać nowe dane\n",
					"-- ============================================\n",
					"\n",
					"MERGE INTO silver.f_forecast AS target\n",
					"USING filter_aggregated_forecast AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.forecast_date = source.forecast_date\n",
					"   AND target.forecast_snapshot = source.forecast_snapshot\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.quantity = source.quantity,\n",
					"    target.whrs_sell_in_quantity = source.whrs_sell_in_quantity,\n",
					"    target.whrs_open_quantity = source.whrs_open_quantity,\n",
					"    target.whrs_end_quantity = source.whrs_end_quantity,\n",
					"    \n",
					"    target.pos_sell_out_quantity = source.pos_sell_out_quantity,\n",
					"    target.pos_open_quantity = source.pos_open_quantity,\n",
					"    target.pos_end_quantity = source.pos_end_quantity,\n",
					"    \n",
					"    target.amount = source.amount,\n",
					"    target.whrs_sell_in_amount = source.whrs_sell_in_amount,\n",
					"    target.whrs_open_amount = source.whrs_open_amount,\n",
					"    target.whrs_end_amount = source.whrs_end_amount,\n",
					"    \n",
					"    target.pos_sell_out_amount = source.pos_sell_out_amount,\n",
					"    target.pos_open_amount = source.pos_open_amount,\n",
					"    target.pos_end_amount = source.pos_end_amount,\n",
					"    \n",
					"    target.unit_price = source.unit_price,\n",
					"    target.forecast_update_date = source.forecast_update_date\n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, forecast_date, forecast_snapshot,\n",
					"    quantity, whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    pos_sell_out_quantity, pos_open_quantity, pos_end_quantity,\n",
					"    amount, whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    pos_sell_out_amount, pos_open_amount, pos_end_amount, unit_price,forecast_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id, source.country_id, source.forecast_date, source.forecast_snapshot,\n",
					"    source.quantity, source.whrs_sell_in_quantity, source.whrs_open_quantity, source.whrs_end_quantity,\n",
					"    source.pos_sell_out_quantity, source.pos_open_quantity, source.pos_end_quantity,\n",
					"    source.amount, source.whrs_sell_in_amount, source.whrs_open_amount, source.whrs_end_amount,\n",
					"    source.pos_sell_out_amount, source.pos_open_amount, source.pos_end_amount, source.unit_price,source.forecast_update_date\n",
					"  );\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"## 1. Załaduj dane z Bronze i Customers jako tymczasowe widoki\n",
					"df_bronze = spark.read.option(\"header\", \"true\").csv(\n",
					"    \"abfss://bronze@bigpharma.dfs.core.windows.net/MinIo_Pharmacies/*/*/*.csv\"\n",
					")\n",
					"df_bronze.createOrReplaceTempView(\"bronze_pos\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"--F_POS_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- ============================================\n",
					"-- 1. Rejestracja danych z Bronze jako widok tymczasowy\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW bronze_pos\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/MinIo_Pharmacies'\n",
					");\n",
					"-- ============================================\n",
					"-- 2. Przygotowanie danych – najnowsze update + agregacja miesięczna\n",
					"-- ============================================\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_pos AS\n",
					"SELECT \n",
					"    product_id,\n",
					"    country_id,\n",
					"    max(update_date) as pos_update_date,    \n",
					"    TRUNC(transaction_date, \"MM\") AS transaction_date,\n",
					"    SUM(pos_sell_out_quantity) AS pos_sell_out_quantity,\n",
					"    SUM(pos_open_quantity) AS pos_open_quantity,\n",
					"    SUM(pos_end_quantity) AS pos_end_quantity,\n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price), 2) AS pos_sell_out_amount,\n",
					"    ROUND(SUM(pos_open_quantity * unit_price), 2) AS pos_open_amount,\n",
					"    ROUND(SUM(pos_end_quantity * unit_price), 2) AS pos_end_amount,\n",
					"    ROUND(SUM(pos_sell_out_quantity * unit_price) / NULLIF(SUM(pos_sell_out_quantity), 0), 2) AS unit_price\n",
					"FROM  bronze_pos\n",
					"GROUP BY product_id, country_id, TRUNC(transaction_date, \"MM\");\n",
					"\n",
					"\n",
					"-- ============================================\n",
					"-- 3. Stworzenie tabeli docelowej (Silver) jeśli nie istnieje\n",
					"-- ============================================\n",
					"CREATE TABLE IF NOT EXISTS silver.f_pos_data\n",
					"USING delta\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_pos_data'\n",
					"AS\n",
					"SELECT * FROM aggregated_bronze_pos\n",
					"WHERE 1 = 0;\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_bronze_pos AS\n",
					"SELECT * from aggregated_bronze_pos n \n",
					"where  NOT EXISTS (select product_id From silver.f_pos_data s \n",
					"                    where s.product_id =n.product_id \n",
					"                      and s.country_id = n.country_id\n",
					"                      and s.pos_update_date = n.pos_update_date\n",
					"                      and s.transaction_date = n.transaction_date);\n",
					"\n",
					"\n",
					"\n",
					"-- ============================================\n",
					"-- 4. MERGE INTO (UPSERT) danych do tabeli Delta\n",
					"-- ============================================\n",
					"\n",
					"MERGE INTO silver.f_pos_data AS target\n",
					"USING filter_aggregated_bronze_pos AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.transaction_date = source.transaction_date\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    target.pos_sell_out_quantity = source.pos_sell_out_quantity,\n",
					"    target.pos_open_quantity = source.pos_open_quantity,\n",
					"    target.pos_end_quantity = source.pos_end_quantity,\n",
					"    target.pos_sell_out_amount = source.pos_sell_out_amount,\n",
					"    target.pos_open_amount = source.pos_open_amount,\n",
					"    target.pos_end_amount = source.pos_end_amount,\n",
					"    target.unit_price = source.unit_price,\n",
					"    target.pos_update_date = source.pos_update_date \n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id,\n",
					"    country_id,\n",
					"    transaction_date,\n",
					"    pos_sell_out_quantity,\n",
					"    pos_open_quantity,\n",
					"    pos_end_quantity,\n",
					"    pos_sell_out_amount,\n",
					"    pos_open_amount,\n",
					"    pos_end_amount,\n",
					"    unit_price,\n",
					"    pos_update_date \n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id,\n",
					"    source.country_id,\n",
					"    source.transaction_date,\n",
					"    source.pos_sell_out_quantity,\n",
					"    source.pos_open_quantity,\n",
					"    source.pos_end_quantity,\n",
					"    source.pos_sell_out_amount,\n",
					"    source.pos_open_amount,\n",
					"    source.pos_end_amount,\n",
					"    source.unit_price,\n",
					"    source.pos_update_date \n",
					"  );\n",
					"\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"--F_SALES_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"-- 1. Tymczasowe widoki na pliki z ADLS Gen2\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_orders\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/orders'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_order_details\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/order_details'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW d_customers\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					");\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS silver.f_sales (\n",
					"    country_id STRING,\n",
					"    product_id STRING,\n",
					"    shipped_date DATE,\n",
					"    quantity DOUBLE,\n",
					"    discount DOUBLE,\n",
					"    amount DOUBLE,\n",
					"    unit_price DOUBLE,\n",
					"    order_details_update_date DATE,\n",
					"    order_update_date DATE\n",
					"\n",
					")\n",
					"USING DELTA\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_sales/';\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_orders AS\n",
					"WITH orders_trunc AS (\n",
					"    SELECT\n",
					"        order_id,\n",
					"        customer_id,\n",
					"        TRUNC(order_date, 'MM') AS order_date,\n",
					"        TRUNC(required_date, 'MM') AS required_date,\n",
					"        TRUNC(shipped_date, 'MM') AS shipped_date,\n",
					"        update_date AS order_update_date\n",
					"    FROM bronze_orders\n",
					"),\n",
					"joined_orders AS (\n",
					"    SELECT\n",
					"        o.order_id,\n",
					"        c.country_id,\n",
					"        od.product_id,\n",
					"        o.shipped_date,\n",
					"        od.unit_price,\n",
					"        od.quantity,\n",
					"        od.discount,\n",
					"        o.order_date,\n",
					"        od.update_date AS order_details_update_date,\n",
					"        o.order_update_date\n",
					"    FROM orders_trunc o\n",
					"    JOIN bronze_order_details od ON o.order_id = od.order_id\n",
					"    JOIN d_customers c ON o.customer_id = c.customer_id\n",
					"),\n",
					"final_orders AS (\n",
					"    SELECT\n",
					"        country_id,\n",
					"        product_id,\n",
					"        shipped_date,\n",
					"        MAX(order_details_update_date) AS order_details_update_date,\n",
					"        MAX(order_update_date) AS order_update_date,\n",
					"        SUM(quantity) AS quantity,\n",
					"        SUM(discount) AS discount,\n",
					"        ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"        ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"    FROM joined_orders\n",
					"    GROUP BY country_id, product_id, shipped_date)\n",
					"SELECT * FROM final_orders; \n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_bronze_orders AS\n",
					"SELECT * from aggregated_bronze_orders  n \n",
					"where  NOT EXISTS (select product_id From silver.f_sales s \n",
					"                    where s.product_id =n.product_id \n",
					"                      and s.shipped_date = n.shipped_date\n",
					"                      and s.order_details_update_date = n.order_details_update_date\n",
					"                      and s.order_update_date = n.order_update_date);\n",
					"\n",
					"\n",
					"-- 3. Przekształcenie i zapis danych do tabeli Silver z użyciem MERGE\n",
					"MERGE INTO silver.f_sales AS target\n",
					"USING filter_aggregated_bronze_orders AS source\n",
					"ON target.country_id = source.country_id\n",
					"   AND target.product_id = source.product_id\n",
					"   AND target.shipped_date = source.shipped_date\n",
					"WHEN MATCHED THEN\n",
					"    UPDATE SET\n",
					"        quantity = source.quantity,\n",
					"        discount = source.discount,\n",
					"        amount = source.amount,\n",
					"        unit_price = source.unit_price,\n",
					"        order_details_update_date = source.order_details_update_date,\n",
					"        order_update_date = source.order_update_date \n",
					"WHEN NOT MATCHED THEN\n",
					"    INSERT (\n",
					"        country_id, product_id, shipped_date,\n",
					"        quantity, discount, amount, unit_price, order_details_update_date, order_update_date \n",
					"    )\n",
					"    VALUES (\n",
					"        source.country_id, source.product_id, source.shipped_date,\n",
					"        source.quantity, source.discount, source.amount, source.unit_price,source.order_details_update_date,source.order_update_date \n",
					"    );\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"## 1. Załaduj dane z Bronze i Customers jako tymczasowe widoki\n",
					"df_bronze = spark.read.option(\"header\", \"true\").csv(\n",
					"    \"abfss://bronze@bigpharma.dfs.core.windows.net/MinIo_Distributors/*/*/*.csv\"\n",
					")\n",
					"df_bronze.createOrReplaceTempView(\"bronze_inventory\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"--F_WH_DATA_LOAD_SQL\n",
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- 1. Załaduj dane z Bronze i Customers jako tymczasowe widoki\n",
					"CREATE OR REPLACE TEMP VIEW bronze_inventory\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/MinIo_Distributors/**'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW silver_d_customers\n",
					"USING delta\n",
					"OPTIONS (\n",
					"  path 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					");\n",
					"\n",
					"-- 2. Utwórz tabelę docelową Silver jako Delta (jeśli nie istnieje)\n",
					"CREATE TABLE IF NOT EXISTS silver.f_wh_data (\n",
					"  product_id STRING,\n",
					"  country_id STRING,\n",
					"  transaction_date DATE,\n",
					"  whrs_sell_in_quantity DOUBLE,\n",
					"  whrs_open_quantity DOUBLE,\n",
					"  whrs_end_quantity DOUBLE,\n",
					"  whrs_sell_in_amount DOUBLE,\n",
					"  whrs_open_amount DOUBLE,\n",
					"  whrs_end_amount DOUBLE,\n",
					"  unit_price DOUBLE,\n",
					"  whrs_update_date DATE\n",
					")\n",
					"USING DELTA\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_wh_data/';\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_wh AS\n",
					"    WITH join_wh AS (\n",
					"        SELECT\n",
					"            inv.*,\n",
					"            c.country_id\n",
					"        FROM bronze_inventory inv\n",
					"        JOIN silver_d_customers c ON inv.customer_id = c.customer_id\n",
					"    ),\n",
					"    select_wh AS (\n",
					"        SELECT\n",
					"            product_id,\n",
					"            country_id,\n",
					"            update_date as whrs_update_date,\n",
					"            TRUNC(transaction_date, 'MM') AS transaction_date,\n",
					"            unit_price,\n",
					"            whrs_sell_in_quantity,\n",
					"            whrs_open_quantity,\n",
					"            whrs_end_quantity\n",
					"        FROM join_wh\n",
					"    ),\n",
					"    aggregated AS (\n",
					"        SELECT\n",
					"            product_id,\n",
					"            country_id,\n",
					"            transaction_date,\n",
					"            max(whrs_update_date) as  whrs_update_date,\n",
					"            SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"            SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"            SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"            ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"            ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"            ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"            ROUND(SUM(whrs_sell_in_quantity * unit_price) / NULLIF(SUM(whrs_sell_in_quantity), 0), 2) AS unit_price\n",
					"        FROM select_wh\n",
					"        GROUP BY product_id, country_id, transaction_date\n",
					"    )\n",
					" SELECT * FROM aggregated;\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_bronze_wh AS\n",
					"SELECT * from aggregated_bronze_wh  n \n",
					"where  NOT EXISTS (select product_id From silver.f_wh_data s \n",
					"                    where s.product_id =n.product_id \n",
					"                      and s.country_id = n.country_id\n",
					"                      and s.transaction_date = n.transaction_date\n",
					"                      and s.whrs_update_date = n.whrs_update_date);\n",
					"\n",
					"\n",
					"-- 3. MERGE danych do tabeli Silver z agregacją i filtrowaniem\n",
					"MERGE INTO silver.f_wh_data AS target\n",
					"USING filter_aggregated_bronze_wh AS source\n",
					"ON target.product_id = source.product_id\n",
					"   AND target.country_id = source.country_id\n",
					"   AND target.transaction_date = source.transaction_date\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    whrs_sell_in_quantity = source.whrs_sell_in_quantity,\n",
					"    whrs_open_quantity = source.whrs_open_quantity,\n",
					"    whrs_end_quantity = source.whrs_end_quantity,\n",
					"    whrs_sell_in_amount = source.whrs_sell_in_amount,\n",
					"    whrs_open_amount = source.whrs_open_amount,\n",
					"    whrs_end_amount = source.whrs_end_amount,\n",
					"    unit_price = source.unit_price,\n",
					"    whrs_update_date = source.whrs_update_date\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, transaction_date,\n",
					"    whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    unit_price, whrs_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.product_id, source.country_id, source.transaction_date,\n",
					"    source.whrs_sell_in_quantity, source.whrs_open_quantity, source.whrs_end_quantity,\n",
					"    source.whrs_sell_in_amount, source.whrs_open_amount, source.whrs_end_amount,\n",
					"    source.unit_price,source.whrs_update_date\n",
					"  );\n",
					"\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"-- D_DIM_SQL\n",
					"CREATE DATABASE IF NOT EXISTS gold;\n",
					"\n",
					"CREATE OR REPLACE VIEW silver_d_products AS\n",
					"SELECT * FROM delta.`abfss://silver@bigpharma.dfs.core.windows.net/d_products`;\n",
					"\n",
					"CREATE OR REPLACE VIEW silver_d_regions AS\n",
					"SELECT * FROM delta.`abfss://silver@bigpharma.dfs.core.windows.net/d_customers`;\n",
					"\n",
					"-- Tworzenie tabel w warstwie Gold\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS gold.d_products\n",
					"USING DELTA\n",
					"LOCATION 'abfss://gold@bigpharma.dfs.core.windows.net/d_products'\n",
					"AS\n",
					"SELECT product_id AS IdProduct,\n",
					"       product_name AS Name,\n",
					"       brand_name AS Brand,\n",
					"       sub_brand_name AS SubBrand,\n",
					"       category_name AS Category \n",
					" FROM silver_d_products\n",
					"WHERE 1 = 0;\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS gold.d_regions\n",
					"USING DELTA\n",
					"LOCATION 'abfss://gold@bigpharma.dfs.core.windows.net/d_customers'\n",
					"AS\n",
					"SELECT country_id AS IDCountry,\n",
					"       cluster AS Claster,\n",
					"       region_description AS Region,\n",
					"       country AS Country\n",
					"FROM silver_d_regions\n",
					"WHERE 1 = 0;\n",
					"\n",
					"-- Zmiana nazw kolumn w tabeli d_products i zapis do warstwy Gold\n",
					"INSERT OVERWRITE TABLE gold.d_products\n",
					"\n",
					"SELECT \n",
					"    product_id AS IdProduct,\n",
					"    product_name AS Name,\n",
					"    brand_name AS Brand,\n",
					"    sub_brand_name AS SubBrand,\n",
					"    category_name AS Category\n",
					"FROM silver_d_products;\n",
					"\n",
					"-- Usuwanie duplikatów w tabeli d_regions i zapis do nowej tabeli Gold\n",
					"INSERT OVERWRITE TABLE gold.d_regions\n",
					"SELECT DISTINCT \n",
					"    country_id AS IDCountry,\n",
					"    cluster AS Claster,\n",
					"    region_description AS Region,\n",
					"    country AS Country\n",
					"FROM silver_d_regions;"
				],
				"execution_count": null
			}
		]
	}
}