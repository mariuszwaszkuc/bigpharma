{
	"name": "D_DIM",
	"properties": {
		"folder": {
			"name": "Load Gold"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "863315ac-bc60-40f1-a84f-c9d38b5e6a70"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, max, coalesce, trunc, lit, add_months\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.functions import to_date\r\n",
					"\r\n",
					"# Tworzenie sesji Spark\r\n",
					"spark = SparkSession.builder.appName(\"AzureSynapseMigration\").getOrCreate()\r\n",
					"\r\n",
					"# Parametry dla warstwy Silver (ADLS Gen2)\r\n",
					"bucket_name_silver = \"abfss://silver@bigpharma.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"# Parametry dla warstwy Gold (ADLS Gen2)\r\n",
					"bucket_name_gold = \"abfss://gold@bigpharma.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"# Ścieżki do plików Parquet w ADLS Gen2 dla warstwy Silver\r\n",
					"d_products_silver_path = f\"{bucket_name_silver}/d_products\"\r\n",
					"d_regions_silver_path = f\"{bucket_name_silver}/d_customers\"\r\n",
					"\r\n",
					"# Załaduj dane z warstwy Silver\r\n",
					"d_products = spark.read.parquet(d_products_silver_path)\r\n",
					"d_regions = spark.read.parquet(d_regions_silver_path)\r\n",
					"\r\n",
					"# Ścieżki do plików Parquet w ADLS Gen2 dla warstwy Gold\r\n",
					"d_products_gold_path = f\"{bucket_name_gold}/d_products\"\r\n",
					"d_regions_gold_path = f\"{bucket_name_gold}/d_regions\"\r\n",
					"\r\n",
					"# Można również załadować dane do warstwy Gold, jeśli konieczne\r\n",
					"d_products = spark.read.parquet(d_products_silver_path)\r\n",
					"d_regions = spark.read.parquet(d_regions_silver_path)\r\n",
					"\r\n",
					"\r\n",
					"d_products.write.mode(\"overwrite\").parquet(d_products_gold_path)\r\n",
					"\r\n",
					"selected_columns = d_regions[[\"country_id\", \"cluster\", \"region_description\", \"country\"]]\r\n",
					"\r\n",
					"# Usunięcie duplikatów\r\n",
					"unique_d_regions = selected_columns.drop_duplicates()\r\n",
					"unique_d_regions.write.mode(\"overwrite\").parquet(d_regions_gold_path)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}