{
	"name": "F_SALES_LOAD_SQL",
	"properties": {
		"folder": {
			"name": "Load_Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0d1f04fd-d2dd-4661-b9bf-de1cd543577b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"CREATE DATABASE IF NOT EXISTS silver;\n",
					"\n",
					"-- 1. Temporary views on files from ADLS Gen2\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_orders\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/orders'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW bronze_order_details\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/order_details'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW d_customers\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					");\n",
					"\n",
					"-- 2. Create target table (if not exists)\n",
					"CREATE TABLE IF NOT EXISTS silver.f_sales (\n",
					"    country_id STRING,\n",
					"    product_id STRING,\n",
					"    shipped_date DATE,\n",
					"    quantity DOUBLE,\n",
					"    discount DOUBLE,\n",
					"    amount DOUBLE,\n",
					"    unit_price DOUBLE,\n",
					"    order_details_update_date DATE,\n",
					"    order_update_date DATE\n",
					")\n",
					"USING DELTA\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_sales/';\n",
					"\n",
					"-- 2. Prepare data â€“ latest update + monthly-level aggregation\n",
					"\n",
					"--CREATE OR REPLACE TEMP VIEW aggregated_bronze_orders AS\n",
					"--WITH orders_trunc AS (\n",
					"--    SELECT\n",
					"--        order_id,\n",
					"--        customer_id,\n",
					"--        TRUNC(order_date, 'MM') AS order_date,\n",
					"--        TRUNC(required_date, 'MM') AS required_date,\n",
					"--        TRUNC(shipped_date, 'MM') AS shipped_date,\n",
					"--        update_date AS order_update_date\n",
					"--    FROM bronze_orders\n",
					"--),\n",
					"--joined_orders AS (\n",
					"--    SELECT\n",
					"--        o.order_id,\n",
					"--        c.country_id,\n",
					"--        od.product_id,\n",
					"--        o.shipped_date,\n",
					"--        od.unit_price,\n",
					"--        od.quantity,\n",
					"--        od.discount,\n",
					"--        o.order_date,\n",
					"--        od.update_date AS order_details_update_date,\n",
					"--        o.order_update_date\n",
					"--    FROM orders_trunc o\n",
					"--    JOIN bronze_order_details od ON o.order_id = od.order_id\n",
					"--    JOIN d_customers c ON o.customer_id = c.customer_id\n",
					"--),\n",
					"--final_orders AS (\n",
					"--    SELECT\n",
					"--        country_id,\n",
					"--        product_id,\n",
					"--        shipped_date,\n",
					"--        MAX(order_details_update_date) AS order_details_update_date,\n",
					"--        MAX(order_update_date) AS order_update_date,\n",
					"--        SUM(quantity) AS quantity,\n",
					"--        SUM(discount) AS discount,\n",
					"--        ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"--        ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"--    FROM joined_orders\n",
					"--    GROUP BY country_id, product_id, shipped_date\n",
					"--)\n",
					"--SELECT * FROM final_orders;\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW aggregated_bronze_orders AS\n",
					"WITH orders_trunc AS (\n",
					"    SELECT\n",
					"        order_id,\n",
					"        customer_id,\n",
					"        TRUNC(order_date, 'MM') AS order_date,\n",
					"        TRUNC(required_date, 'MM') AS required_date,\n",
					"        TRUNC(shipped_date, 'MM') AS shipped_date,\n",
					"        update_date AS order_update_date\n",
					"    FROM bronze_orders\n",
					"),\n",
					"joined_orders AS (\n",
					"    SELECT\n",
					"        o.order_id,\n",
					"        c.country_id,\n",
					"        od.product_id,\n",
					"        o.shipped_date,\n",
					"        od.unit_price,\n",
					"        od.quantity,\n",
					"        od.discount,\n",
					"        o.order_date,\n",
					"        od.update_date AS order_details_update_date,\n",
					"        o.order_update_date\n",
					"    FROM orders_trunc o\n",
					"    JOIN bronze_order_details od ON o.order_id = od.order_id\n",
					"    JOIN d_customers c ON o.customer_id = c.customer_id\n",
					"),\n",
					"orders_with_max_update AS (\n",
					"    SELECT\n",
					"        order_id,\n",
					"        country_id,\n",
					"        product_id,\n",
					"        shipped_date,\n",
					"        order_details_update_date,\n",
					"        order_update_date,\n",
					"        quantity,\n",
					"        discount,\n",
					"        amount,\n",
					"        unit_price,\n",
					"        MAX(order_details_update_date) OVER (PARTITION BY product_id, country_id, shipped_date) AS max_order_details_update_date,\n",
					"        MAX(order_update_date) OVER (PARTITION BY product_id, country_id, shipped_date) AS max_order_update_date\n",
					"    FROM joined_orders\n",
					")\n",
					"SELECT\n",
					"    country_id,\n",
					"    product_id,\n",
					"    shipped_date,\n",
					"    order_details_update_date,\n",
					"    order_update_date,\n",
					"    SUM(quantity) AS quantity,\n",
					"    SUM(discount) AS discount,\n",
					"    ROUND(SUM(quantity * unit_price), 2) AS amount,\n",
					"    ROUND(SUM(quantity * unit_price) / NULLIF(SUM(quantity), 0), 2) AS unit_price\n",
					"FROM orders_with_max_update\n",
					"WHERE order_details_update_date = max_order_details_update_date\n",
					"  AND order_update_date = max_order_update_date\n",
					"GROUP BY country_id, product_id, shipped_date, order_details_update_date, order_update_date;\n",
					"\n",
					"\n",
					"-- Filter new or updated records\n",
					"CREATE OR REPLACE TEMP VIEW filter_aggregated_bronze_orders AS\n",
					"SELECT * FROM aggregated_bronze_orders n \n",
					"WHERE NOT EXISTS (\n",
					"  SELECT product_id FROM silver.f_sales s \n",
					"  WHERE s.product_id = n.product_id \n",
					"    AND s.shipped_date = n.shipped_date\n",
					"    AND s.order_details_update_date = n.order_details_update_date\n",
					"    AND s.order_update_date = n.order_update_date\n",
					");\n",
					"\n",
					"-- 3. Transform and write data to Silver table using MERGE\n",
					"MERGE INTO silver.f_sales AS target\n",
					"USING filter_aggregated_bronze_orders AS source\n",
					"ON target.country_id = source.country_id\n",
					"   AND target.product_id = source.product_id\n",
					"   AND target.shipped_date = source.shipped_date\n",
					"\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    quantity = source.quantity,\n",
					"    discount = source.discount,\n",
					"    amount = source.amount,\n",
					"    unit_price = source.unit_price,\n",
					"    order_details_update_date = source.order_details_update_date,\n",
					"    order_update_date = source.order_update_date \n",
					"\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    country_id, product_id, shipped_date,\n",
					"    quantity, discount, amount, unit_price, order_details_update_date, order_update_date\n",
					"  )\n",
					"  VALUES (\n",
					"    source.country_id, source.product_id, source.shipped_date,\n",
					"    source.quantity, source.discount, source.amount, source.unit_price, source.order_details_update_date, source.order_update_date\n",
					"  );\n",
					""
				],
				"execution_count": null
			}
		]
	}
}