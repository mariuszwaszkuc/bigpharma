{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c44443f5-eaed-4746-bdd6-f4c2021aa164"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%%configure -f\n",
					"{\n",
					"    \"conf\": {\n",
					"        \"spark.jars.packages\": \"org.apache.hadoop:hadoop-aws:3.3.1\"\n",
					"    }\n",
					"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import os\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.functions import input_file_name\n",
					"\n",
					"\n",
					"\n",
					"# Odczytanie sekretów z Key Vault\n",
					"access_key = 'minioadmin'\n",
					"secret_key = 'minioadmin'\n",
					"\n",
					"# Inicjalizacja sesji Spark z odczytanymi danymi uwierzytelniającymi\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"Incremental Load MinIO to ADLS Gen2\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.endpoint\", \"http://20.215.33.25:9000\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.access.key\", access_key) \\\n",
					"    .config(\"spark.hadoop.fs.s3a.secret.key\", secret_key) \\\n",
					"    .config(\"spark.hadoop.fs.s3a.connection.maximum\", \"100\") \\\n",
					"    .config(\"spark.hadoop.fs.s3a.path.style.access\", \"true\") \\\n",
					"    .getOrCreate()\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Krok 1: Sprawdzamy, czy plik Delta z przetworzonymi plikami istnieje\n",
					"processed_files_path = \"abfss://bronze@bigpharma.dfs.core.windows.net/MinIoDistributors/processed_files_delta\"\n",
					"\n",
					"# Próbujemy odczytać plik Delta\n",
					"processed_df = None\n",
					"try:\n",
					"    # Odczyt pliku Delta (w przypadku, gdy plik istnieje)\n",
					"    processed_df = spark.read.format(\"delta\").load(processed_files_path)\n",
					"    print(\"Załadowano istniejący plik Delta z przetworzonymi plikami.\")\n",
					"except AnalysisException:\n",
					"    # Jeśli plik Delta nie istnieje, tworzony jest pusty DataFrame\n",
					"    processed_df = spark.createDataFrame([], \"filename STRING\")\n",
					"    print(\"Plik Delta z przetworzonymi plikami nie istnieje, tworzymy nowy pusty DataFrame.\")\n",
					"\n",
					"# Krok 2: Odczytuj pliki z MinIO (wczytujemy wszystkie pliki w folderze, w tym z subfolderów)\n",
					"bucket_name = 'distributors'\n",
					"folder_path = 'data/'\n",
					"\n",
					"# Wczytujemy wszystkie pliki z folderu\n",
					"files_metadata = spark.read \\\n",
					"    .option(\"header\", \"true\") \\\n",
					"    .csv(f\"s3a://{bucket_name}/{folder_path}*\")\n",
					"\n",
					"# Zbieranie nazw plików\n",
					"new_files = files_metadata.select(input_file_name()).rdd.flatMap(lambda x: x).collect()\n",
					"\n",
					"# Filtrowanie nowych plików, które jeszcze nie zostały przetworzone\n",
					"new_files = [file.split(\"/\")[-1] for file in new_files if file.split(\"/\")[-1] not in processed_df.rdd.flatMap(lambda x: x).collect()]\n",
					"\n",
					"# Krok 3: Dla każdego nowego pliku, wczytujemy go i zapisujemy do ADLS Gen2\n",
					"for file in new_files:\n",
					"    file_path = f\"s3a://{bucket_name}/{folder_path}{file}\"\n",
					"\n",
					"    # Wczytujemy plik\n",
					"    df_new = spark.read.option(\"header\", \"true\").csv(file_path)\n",
					"\n",
					"    # Krok 4: Zapisz plik jako osobny plik w ADLS Gen2\n",
					"    target_path = f\"abfss://bronze@bigpharma.dfs.core.windows.net/MinIoDistributors/{file}\"\n",
					"    \n",
					"    # Zapisujemy każdy plik osobno (mode 'overwrite' - nadpisuje jeśli już istnieje)\n",
					"    df_new.write \\\n",
					"        .mode(\"overwrite\") \\\n",
					"        .csv(target_path)\n",
					"\n",
					"# Krok 5: Zaktualizuj listę przetworzonych plików w ADLS\n",
					"# Po zakończeniu przetwarzania plików, dodajemy nowe pliki do listy przetworzonych\n",
					"processed_files_updated = processed_df.union(spark.createDataFrame([(file,) for file in new_files], [\"filename\"]))\n",
					"\n",
					"# Krok 6: Zapisz zaktualizowaną listę przetworzonych plików w formacie Delta\n",
					"processed_files_updated.write.format(\"delta\") \\\n",
					"    .mode(\"overwrite\") \\\n",
					"    .save(processed_files_path)\n",
					"\n",
					"print(f\"Załadowano {len(new_files)} nowych plików.\")\n",
					""
				],
				"execution_count": 8
			}
		]
	}
}