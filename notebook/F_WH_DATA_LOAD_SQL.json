{
	"name": "F_WH_DATA_LOAD_SQL",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "06720e4a-96f4-4351-8084-f55a8bea6cfb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/825011b4-60a2-4e32-a6f1-221c4bc009ef/resourceGroups/lakehouse/providers/Microsoft.Synapse/workspaces/mrgbigpharma/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://mrgbigpharma.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"-- 1. Załaduj dane z Bronze i Customers jako tymczasowe widoki\n",
					"CREATE OR REPLACE TEMP VIEW bronze_inventory\n",
					"USING parquet\n",
					"OPTIONS (\n",
					"  path 'abfss://bronze@bigpharma.dfs.core.windows.net/Erp/inventory_wholesaler_history_details'\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMP VIEW silver_customers\n",
					"USING delta\n",
					"OPTIONS (\n",
					"  path 'abfss://silver@bigpharma.dfs.core.windows.net/d_customers'\n",
					");\n",
					"\n",
					"-- 2. Utwórz tabelę docelową Silver jako Delta (jeśli nie istnieje)\n",
					"CREATE TABLE IF NOT EXISTS f_wh_data (\n",
					"  product_id STRING,\n",
					"  country_id STRING,\n",
					"  transaction_date DATE,\n",
					"  whrs_sell_in_quantity DOUBLE,\n",
					"  whrs_open_quantity DOUBLE,\n",
					"  whrs_end_quantity DOUBLE,\n",
					"  whrs_sell_in_amount DOUBLE,\n",
					"  whrs_open_amount DOUBLE,\n",
					"  whrs_end_amount DOUBLE,\n",
					"  unit_price DOUBLE\n",
					")\n",
					"USING DELTA\n",
					"LOCATION 'abfss://silver@bigpharma.dfs.core.windows.net/f_wh_data/';\n",
					"\n",
					"-- 3. MERGE danych do tabeli Silver z agregacją i filtrowaniem\n",
					"MERGE INTO f_wh_data AS silver\n",
					"USING (\n",
					"    WITH enriched AS (\n",
					"        SELECT\n",
					"            inv.*,\n",
					"            c.country_id,\n",
					"            ROW_NUMBER() OVER (PARTITION BY inv.product_id, inv.customer_id ORDER BY inv.update_date DESC) AS rn\n",
					"        FROM bronze_inventory inv\n",
					"        JOIN silver_customers c ON inv.customer_id = c.customer_id\n",
					"    ),\n",
					"    filtered AS (\n",
					"        SELECT\n",
					"            product_id,\n",
					"            country_id,\n",
					"            TRUNC(transaction_date, 'MM') AS transaction_date,\n",
					"            unit_price,\n",
					"            whrs_sell_in_quantity,\n",
					"            whrs_open_quantity,\n",
					"            whrs_end_quantity\n",
					"        FROM enriched\n",
					"        WHERE rn = 1\n",
					"    ),\n",
					"    aggregated AS (\n",
					"        SELECT\n",
					"            product_id,\n",
					"            country_id,\n",
					"            transaction_date,\n",
					"            SUM(whrs_sell_in_quantity) AS whrs_sell_in_quantity,\n",
					"            SUM(whrs_open_quantity) AS whrs_open_quantity,\n",
					"            SUM(whrs_end_quantity) AS whrs_end_quantity,\n",
					"            ROUND(SUM(whrs_sell_in_quantity * unit_price), 2) AS whrs_sell_in_amount,\n",
					"            ROUND(SUM(whrs_open_quantity * unit_price), 2) AS whrs_open_amount,\n",
					"            ROUND(SUM(whrs_end_quantity * unit_price), 2) AS whrs_end_amount,\n",
					"            ROUND(SUM(whrs_sell_in_quantity * unit_price) / NULLIF(SUM(whrs_sell_in_quantity), 0), 2) AS unit_price\n",
					"        FROM filtered\n",
					"        GROUP BY product_id, country_id, transaction_date\n",
					"    )\n",
					"    SELECT * FROM aggregated\n",
					") AS new_data\n",
					"ON silver.product_id = new_data.product_id\n",
					"   AND silver.country_id = new_data.country_id\n",
					"   AND silver.transaction_date = new_data.transaction_date\n",
					"WHEN MATCHED THEN\n",
					"  UPDATE SET\n",
					"    whrs_sell_in_quantity = new_data.whrs_sell_in_quantity,\n",
					"    whrs_open_quantity = new_data.whrs_open_quantity,\n",
					"    whrs_end_quantity = new_data.whrs_end_quantity,\n",
					"    whrs_sell_in_amount = new_data.whrs_sell_in_amount,\n",
					"    whrs_open_amount = new_data.whrs_open_amount,\n",
					"    whrs_end_amount = new_data.whrs_end_amount,\n",
					"    unit_price = new_data.unit_price\n",
					"WHEN NOT MATCHED THEN\n",
					"  INSERT (\n",
					"    product_id, country_id, transaction_date,\n",
					"    whrs_sell_in_quantity, whrs_open_quantity, whrs_end_quantity,\n",
					"    whrs_sell_in_amount, whrs_open_amount, whrs_end_amount,\n",
					"    unit_price\n",
					"  )\n",
					"  VALUES (\n",
					"    new_data.product_id, new_data.country_id, new_data.transaction_date,\n",
					"    new_data.whrs_sell_in_quantity, new_data.whrs_open_quantity, new_data.whrs_end_quantity,\n",
					"    new_data.whrs_sell_in_amount, new_data.whrs_open_amount, new_data.whrs_end_amount,\n",
					"    new_data.unit_price\n",
					"  );\n",
					"\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}